{"version":3,"names":["parseCustomStyles","styles","JSON","parse","error","console","parseSearchKeys","documentAttributesForDisplay","parsedKeys","Array","isArray","every","key","warn","extractDynamicProperties","document","keys","extractedProperties","forEach","serializeStyles","stringify","getFormattedTimeFromNow","timestamp","now","Date","inputTime","diffInSeconds","Math","floor","getTime","minutes","hours","days","years","flattenFacets","sections","flatMap","section","fullPath","path","filter","label","replace","count","value","children"],"sources":["src/utils/utils.ts"],"sourcesContent":["export function parseCustomStyles(\n  styles: string | Record<string, string>,\n): Record<string, string> {\n  if (typeof styles === 'string') {\n    try {\n      return JSON.parse(styles);\n    } catch (error) {\n      console.error('Invalid customStyles format:', styles);\n      return {};\n    }\n  }\n  return styles || {};\n}\n\nexport function parseSearchKeys(\n  documentAttributesForDisplay: string,\n): string[] {\n  try {\n    const parsedKeys = JSON.parse(documentAttributesForDisplay);\n    if (\n      Array.isArray(parsedKeys) &&\n      parsedKeys.every((key) => typeof key === 'string')\n    ) {\n      return parsedKeys;\n    }\n    console.warn(\n      'searchKeys must be a JSON array of strings. Defaulting to an empty array.',\n    );\n    return [];\n  } catch (error) {\n    console.error('Failed to parse searchKeys:', error);\n    return [];\n  }\n}\n\nexport function extractDynamicProperties(\n  document: Record<string, string | number>,\n  keys: string[],\n) {\n  const extractedProperties: Record<string, string | number> = {};\n  keys.forEach((key) => {\n    extractedProperties[key] = document[key] || '';\n  });\n  return extractedProperties;\n}\n\nexport function serializeStyles(\n  styles: Record<string, Record<string, string>>,\n): string {\n  try {\n    return JSON.stringify(styles);\n  } catch (error) {\n    console.error('Error serializing styles:', error);\n    return '{}';\n  }\n}\n\nexport function getFormattedTimeFromNow(timestamp: string): string {\n  const now = new Date();\n  const inputTime = new Date(timestamp);\n  const diffInSeconds = Math.floor(\n    (now.getTime() - inputTime.getTime()) / 1000,\n  );\n\n  const minutes = Math.floor(diffInSeconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n  const years = Math.floor(days / 365);\n\n  if (minutes < 60) {\n    return `${minutes}m ago`;\n  }\n  if (hours < 24) {\n    return `${hours}h ago`;\n  }\n  if (days < 365) {\n    return `${days}d ago`;\n  }\n  return `${years}y ago`;\n}\n\ntype Section = {\n  count: number;\n  path: string;\n  children: Section[];\n};\n\ntype FacetCheckbox = {\n  label: string;\n  value: string;\n};\n\nexport function flattenFacets(sections: Section[]): FacetCheckbox[] {\n  return sections.flatMap((section) => {\n    const fullPath = section.path;\n    const filter = {\n      label: `${fullPath.replace(/^\\//, '')} (${section.count})`,\n      value: fullPath,\n    };\n\n    const children = section.children ? flattenFacets(section.children) : [];\n    return [filter, ...children];\n  });\n}\n"],"mappings":"SAAgBA,EACdC,GAEA,UAAWA,IAAW,SAAU,CAC9B,IACE,OAAOC,KAAKC,MAAMF,E,CAClB,MAAOG,GACPC,QAAQD,MAAM,+BAAgCH,GAC9C,MAAO,E,EAGX,OAAOA,GAAU,EACnB,C,SAEgBK,EACdC,GAEA,IACE,MAAMC,EAAaN,KAAKC,MAAMI,GAC9B,GACEE,MAAMC,QAAQF,IACdA,EAAWG,OAAOC,UAAeA,IAAQ,WACzC,CACA,OAAOJ,C,CAETH,QAAQQ,KACN,6EAEF,MAAO,E,CACP,MAAOT,GACPC,QAAQD,MAAM,8BAA+BA,GAC7C,MAAO,E,CAEX,C,SAEgBU,EACdC,EACAC,GAEA,MAAMC,EAAuD,GAC7DD,EAAKE,SAASN,IACZK,EAAoBL,GAAOG,EAASH,IAAQ,EAAE,IAEhD,OAAOK,CACT,C,SAEgBE,EACdlB,GAEA,IACE,OAAOC,KAAKkB,UAAUnB,E,CACtB,MAAOG,GACPC,QAAQD,MAAM,4BAA6BA,GAC3C,MAAO,I,CAEX,C,SAEgBiB,EAAwBC,GACtC,MAAMC,EAAM,IAAIC,KAChB,MAAMC,EAAY,IAAID,KAAKF,GAC3B,MAAMI,EAAgBC,KAAKC,OACxBL,EAAIM,UAAYJ,EAAUI,WAAa,KAG1C,MAAMC,EAAUH,KAAKC,MAAMF,EAAgB,IAC3C,MAAMK,EAAQJ,KAAKC,MAAME,EAAU,IACnC,MAAME,EAAOL,KAAKC,MAAMG,EAAQ,IAChC,MAAME,EAAQN,KAAKC,MAAMI,EAAO,KAEhC,GAAIF,EAAU,GAAI,CAChB,MAAO,GAAGA,Q,CAEZ,GAAIC,EAAQ,GAAI,CACd,MAAO,GAAGA,Q,CAEZ,GAAIC,EAAO,IAAK,CACd,MAAO,GAAGA,Q,CAEZ,MAAO,GAAGC,QACZ,C,SAagBC,EAAcC,GAC5B,OAAOA,EAASC,SAASC,IACvB,MAAMC,EAAWD,EAAQE,KACzB,MAAMC,EAAS,CACbC,MAAO,GAAGH,EAASI,QAAQ,MAAO,QAAQL,EAAQM,SAClDC,MAAON,GAGT,MAAMO,EAAWR,EAAQQ,SAAWX,EAAcG,EAAQQ,UAAY,GACtE,MAAO,CAACL,KAAWK,EAAS,GAEhC,Q","ignoreList":[]}