{"version":3,"names":["searchcraftFiltersListModuleCss","SearchcraftFiltersListStyle0","SearchcraftFiltersList","this","searchStore","useSearchcraftStore","getState","handleFilterChange","value","checked","selectedFilters","add","delete","selectedFiltersArray","Array","from","transformedFacets","reduce","acc","filter","facetKey","facetValue","split","counts","filtersUpdated","emit","setFacets","search","Set","connectedCallback","unsubscribe","subscribe","state","facets","_a","searchResults","data","populateFiltersFromFacets","disconnectedCallback","newFilters","Object","entries","flatMap","facetData","map","count","label","dynamicFilters","render","filtersToRender","length","filters","h","key","class","type","onChange","event","target"],"sources":["src/components/searchcraft-filters-list/searchcraft-filters-list.module.scss?tag=searchcraft-filters-list&encapsulation=shadow","src/components/searchcraft-filters-list/searchcraft-filters-list.tsx"],"sourcesContent":[null,"import {\n  Component,\n  h,\n  State,\n  Prop,\n  Event,\n  type EventEmitter,\n} from '@stencil/core';\nimport { useSearchcraftStore } from '@provider/store';\n\n@Component({\n  tag: 'searchcraft-filters-list',\n  styleUrl: 'searchcraft-filters-list.module.scss',\n  shadow: true,\n})\nexport class SearchcraftFiltersList {\n  @Prop() filters: Array<{ label: string; value: string }> = [];\n  @Event() filtersUpdated: EventEmitter<string[]>;\n\n  @State() selectedFilters: Set<string> = new Set();\n  @State() dynamicFilters: Array<{ label: string; value: string }> = [];\n\n  private searchStore = useSearchcraftStore.getState();\n  unsubscribe: () => void;\n\n  connectedCallback() {\n    // Subscribe to search results from the store\n    this.unsubscribe = useSearchcraftStore.subscribe((state) => {\n      const facets = state.searchResults?.data.facets;\n      if (facets) {\n        this.populateFiltersFromFacets(facets);\n      }\n    });\n  }\n\n  disconnectedCallback() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n    }\n  }\n\n  populateFiltersFromFacets(\n    facets: Record<string, { counts: Record<string, number> }>,\n  ) {\n    const newFilters = Object.entries(facets).flatMap(([facetKey, facetData]) =>\n      Object.entries(facetData.counts).map(([value, count]) => ({\n        label: `${facetKey}: ${value} (${count})`,\n        value,\n      })),\n    );\n    this.dynamicFilters = newFilters;\n  }\n\n  handleFilterChange = (value: string, checked: boolean) => {\n    if (checked) {\n      this.selectedFilters.add(value);\n    } else {\n      this.selectedFilters.delete(value);\n    }\n    const selectedFiltersArray = Array.from(this.selectedFilters);\n\n    // Transform the selected filters into the expected facets structure\n    const transformedFacets: Record<\n      string,\n      { counts: Record<string, number> }\n    > = selectedFiltersArray.reduce((acc, filter) => {\n      const [facetKey, facetValue] = filter.split(':');\n      if (!acc[facetKey]) {\n        acc[facetKey] = { counts: {} };\n      }\n      acc[facetKey].counts[facetValue] = 1; // Assign a count of 1 for simplicity\n      return acc;\n    }, {});\n\n    this.filtersUpdated.emit(selectedFiltersArray);\n\n    // Update the search store with the transformed facets\n    this.searchStore.setFacets(transformedFacets);\n    this.searchStore.search();\n  };\n\n  render() {\n    const filtersToRender =\n      this.dynamicFilters.length > 0 ? this.dynamicFilters : this.filters;\n\n    return (\n      <div class='filters-list'>\n        {filtersToRender.map((filter) => (\n          <label key={filter.label}>\n            <input\n              type='checkbox'\n              value={filter.value}\n              onChange={(event: Event) =>\n                this.handleFilterChange(\n                  filter.value,\n                  (event.target as HTMLInputElement).checked,\n                )\n              }\n            />\n            {filter.label}\n          </label>\n        ))}\n      </div>\n    );\n  }\n}\n"],"mappings":"sFAAA,MAAMA,EAAkC,GACxC,MAAAC,EAAeD,E,MCcFE,EAAsB,M,wEAOzBC,KAAAC,YAAcC,EAAoBC,WA+B1CH,KAAAI,mBAAqB,CAACC,EAAeC,KACnC,GAAIA,EAAS,CACXN,KAAKO,gBAAgBC,IAAIH,E,KACpB,CACLL,KAAKO,gBAAgBE,OAAOJ,E,CAE9B,MAAMK,EAAuBC,MAAMC,KAAKZ,KAAKO,iBAG7C,MAAMM,EAGFH,EAAqBI,QAAO,CAACC,EAAKC,KACpC,MAAOC,EAAUC,GAAcF,EAAOG,MAAM,KAC5C,IAAKJ,EAAIE,GAAW,CAClBF,EAAIE,GAAY,CAAEG,OAAQ,G,CAE5BL,EAAIE,GAAUG,OAAOF,GAAc,EACnC,OAAOH,CAAG,GACT,IAEHf,KAAKqB,eAAeC,KAAKZ,GAGzBV,KAAKC,YAAYsB,UAAUV,GAC3Bb,KAAKC,YAAYuB,QAAQ,E,aA9DgC,G,qBAGnB,IAAIC,I,oBACuB,E,CAKnE,iBAAAC,GAEE1B,KAAK2B,YAAczB,EAAoB0B,WAAWC,I,MAChD,MAAMC,GAASC,EAAAF,EAAMG,iBAAa,MAAAD,SAAA,SAAAA,EAAEE,KAAKH,OACzC,GAAIA,EAAQ,CACV9B,KAAKkC,0BAA0BJ,E,KAKrC,oBAAAK,GACE,GAAInC,KAAK2B,YAAa,CACpB3B,KAAK2B,a,EAIT,yBAAAO,CACEJ,GAEA,MAAMM,EAAaC,OAAOC,QAAQR,GAAQS,SAAQ,EAAEtB,EAAUuB,KAC5DH,OAAOC,QAAQE,EAAUpB,QAAQqB,KAAI,EAAEpC,EAAOqC,MAAM,CAClDC,MAAO,GAAG1B,MAAaZ,MAAUqC,KACjCrC,cAGJL,KAAK4C,eAAiBR,C,CA+BxB,MAAAS,GACE,MAAMC,EACJ9C,KAAK4C,eAAeG,OAAS,EAAI/C,KAAK4C,eAAiB5C,KAAKgD,QAE9D,OACEC,EAAA,OAAAC,IAAA,2CAAKC,MAAM,gBACRL,EAAgBL,KAAKzB,GACpBiC,EAAA,SAAOC,IAAKlC,EAAO2B,OACjBM,EAAA,SACEG,KAAK,WACL/C,MAAOW,EAAOX,MACdgD,SAAWC,GACTtD,KAAKI,mBACHY,EAAOX,MACNiD,EAAMC,OAA4BjD,WAIxCU,EAAO2B,S","ignoreList":[]}