{"file":"sc-auto-search-form.entry.esm.js","mappings":"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","names":["SearchcraftCore"],"sources":["src/components/sc-auto-search-form/sc-auto-search-form.module.scss?tag=sc-auto-search-form&encapsulation=shadow","src/components/sc-auto-search-form/sc-auto-search-form.tsx"],"sourcesContent":[":root {\n  --font-stack: Helvetica, Arial, sans-serif;\n}\n\n.formLTR {\n  text-align: left;\n}\n\n.formRTL {\n  text-align: right;\n}\n\n.searchContainer {\n  align-items: center;\n  display: flex;\n}","import {\n  Component,\n  Prop,\n  State,\n  Event,\n  type EventEmitter,\n  h,\n} from '@stencil/core';\nimport {\n  type CoreConfigSDK,\n  CoreSDK as SearchcraftCore,\n} from '@searchcraft/core';\n\nimport type { ScInputCustomEvent } from '@components/sc-input/sc-input';\nimport { useSearchcraftStore } from '@provider/store';\n\n@Component({\n  tag: 'sc-auto-search-form',\n  styleUrl: 'sc-auto-search-form.module.scss',\n  shadow: true,\n})\nexport class ScAutoSearchForm {\n  @Prop() autoSearchFormClass = '';\n  @Prop() clearInput: () => void = () => {}; // Default assignment ensures no undefined error\n  @Prop() config: CoreConfigSDK = {\n    apiKey: '',\n    endpointURL: '',\n    index: [],\n  };\n  @Prop() inputCaptionValue = '';\n  @Prop() labelForInput = 'Search';\n  @Prop() placeholderValue = 'Search here';\n  @Prop() rightToLeftOrientation = false;\n  @Prop() searchContainerClass = '';\n\n  /**\n   * Event emitted when the search query changes\n   */\n  @Event() querySubmit: EventEmitter<string>;\n\n  @State() error = false;\n  @State() query = '';\n  @State() searchResults = '';\n\n  private debounceTimeout: ReturnType<typeof setTimeout> | null = null;\n  private debounceDelay = 300; // 300ms debounce delay\n\n  componentDidLoad = () => {\n    const searchcraft = new SearchcraftCore(this.config);\n    this.searchStore.initialize(searchcraft, true);\n  };\n\n  // Initialize searchStore as a private field\n  private searchStore = useSearchcraftStore.getState();\n\n  /**\n   * Handles the input change event from sc-input\n   */\n  handleInputChange = (event: ScInputCustomEvent<string>) => {\n    console.log(event);\n    this.query = event.detail; // Update the query state with input value\n\n    if (this.debounceTimeout) {\n      clearTimeout(this.debounceTimeout); // Clear any existing timeout\n    }\n\n    // Emit querySubmit immediately for real-time updates\n    this.querySubmit.emit(this.query);\n\n    // Set a new debounce timeout to execute search after delay\n    this.debounceTimeout = setTimeout(() => {\n      this.runSearch(); // Execute search logic after typing stops\n    }, this.debounceDelay);\n  };\n\n  /**\n   * Handles the clear input event from sc-input\n   */\n  handleClearInput = () => {\n    this.query = '';\n    if (typeof this.clearInput === 'function') {\n      this.clearInput();\n    }\n\n    if (this.debounceTimeout) {\n      clearTimeout(this.debounceTimeout); // Clear the debounce timeout\n    }\n\n    // Reset error and search results\n    this.error = false;\n    this.searchResults = '';\n  };\n\n  /**\n   * Runs the search logic\n   */\n  private runSearch = async () => {\n    if (this.query.trim() === '') {\n      this.error = true;\n      this.searchResults = '';\n    } else {\n      this.error = false;\n      this.searchStore.setQuery(this.query); // Set the query in the searchStore\n      await this.searchStore.search(); // Perform the search\n      this.searchResults = JSON.stringify(this.searchStore.searchResults); // Store search results as JSON\n    }\n  };\n\n  /**\n   * Handles the form submission logic\n   */\n  handleFormSubmit = async (event: Event) => {\n    event.preventDefault();\n    await this.runSearch(); // Trigger search logic on form submit\n  };\n\n  render() {\n    const formClass = this.rightToLeftOrientation ? 'formRTL' : 'formLTR';\n\n    return (\n      <form class={`${formClass}`} onSubmit={this.handleFormSubmit}>\n        <label>{this.labelForInput}</label>\n        <div class='searchContainer'>\n          <sc-input\n            placeholder-value={this.placeholderValue}\n            query={this.query}\n            input-caption-value={this.inputCaptionValue}\n            right-to-left-orientation={this.rightToLeftOrientation}\n            onSearchInputChange={this.handleInputChange}\n            onClearInput={this.handleClearInput}\n          />\n        </div>\n        {this.error && <p class='error'>Please enter a search query.</p>}\n      </form>\n    );\n  }\n}\n"],"version":3}