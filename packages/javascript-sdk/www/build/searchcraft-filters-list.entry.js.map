{"file":"searchcraft-filters-list.entry.esm.js","mappings":";;;;AAAA,MAAM,+BAA+B,GAAG,8iBAA8iB;;MCgBzkB,sBAAsB;;;;QAYzB,gBAAW,GAAG,mBAAmB,CAAC,QAAQ,EAAE,CAAC;QAqDrD,uBAAkB,GAAG,CAAC,KAAa,EAAE,OAAgB;YACnD,IAAI,OAAO,EAAE;gBACX,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;aACjC;iBAAM;gBACL,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aACpC;YAED,MAAM,oBAAoB,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YAE9D,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;YAC/C,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,CAAC;YAC1D,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;SAC3B,CAAC;uBA5EyD,EAAE;8BAGM,EAAE;8BACF,EAAE;4BAC7C,KAAK;+BACW,IAAI,GAAG,EAAE;oCACO,EAAE;qBACzC,EAAE;4BACK,CAAC;;IAKzB,iBAAiB;QACf,IAAI,CAAC,WAAW,GAAG,mBAAmB,CAAC,SAAS,CAAC,CAAC,KAAK;;YACrD,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,YAAY,CAAC;YACvC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,IAAI,EAAE,CAAC;YAC/B,IAAI,CAAC,YAAY,GAAG,CAAA,MAAA,MAAA,MAAA,KAAK,CAAC,aAAa,0CAAE,IAAI,0CAAE,IAAI,0CAAE,MAAM,KAAI,CAAC,CAAC;YAEjE,MAAM,MAAM,GAAG,MAAA,KAAK,CAAC,aAAa,0CAAE,IAAI,CAAC,MAAM,CAAC;YAChD,IAAI,MAAM,EAAE;gBACV,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAC;aACxC;SACF,CAAC,CAAC;KACJ;IAED,oBAAoB;QAClB,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,IAAI,CAAC,WAAW,EAAE,CAAC;SACpB;KACF;IAED,yBAAyB,CAAC,MAAc;;QACtC,MAAM,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC,CAAA,MAAA,MAAM,CAAC,OAAO,0CAAE,MAAM,KAAI,EAAE,CAAC,CAAC,GAAG,CACjE,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC;YACX,MAAM,WAAW,GAAG,GAAG,CAAC;YACxB,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,GAAG,GAAG,KAAK,EAAE,CAAC;YACpD,OAAO;gBACL,KAAK,EAAE,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,KAAK,GAAG;gBAC7C,KAAK,EAAE,WAAW;aACnB,CAAC;SACH,CACF,CAAC;;QAGF,MAAM,cAAc,GAAG;YACrB,GAAG,IAAI,CAAC,cAAc;YACtB,GAAG,UAAU,CAAC,MAAM,CAClB,CAAC,MAAM,KACL,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CACvB,CAAC,OAAO,KAAK,OAAO,CAAC,KAAK,KAAK,MAAM,CAAC,KAAK,CAC5C,CACJ;SACF,CAAC;QAEF,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;;QAGrC,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,KAAK,CAAC,EAAE;YACpC,IAAI,CAAC,cAAc,GAAG,CAAC,GAAG,cAAc,CAAC,CAAC;SAC3C;KACF;IAgBD,WAAW,CAAC,KAAa;QACvB,OAAO,KAAK;aACT,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;aAClB,KAAK,CAAC,GAAG,CAAC;aACV,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;aAC3D,IAAI,CAAC,GAAG,CAAC,CAAC;KACd;IAED,MAAM;QACJ,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,YAAY,KAAK,CAAC,EAAE;YAC1C,OAAO,IAAI,CAAC;SACb;QAED,MAAM,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,aAAa;YAC5D,MAAM,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAChE,MAAM,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAChD,CAAC,aAAa,KACZ,aAAa,CAAC,KAAK,CAAC,UAAU,CAAC,aAAa,CAAC,KAAK,CAAC;gBACnD,aAAa,CAAC,KAAK,KAAK,aAAa,CAAC,KAAK,CAC9C,CAAC;YACF,uCACK,aAAa,KAChB,SAAS,EACT,QAAQ,EAAE,eAAe,IACzB;SACH,CAAC,CAAC;QAEH,QACE,WAAK,KAAK,EAAC,aAAa,IACrB,eAAe,CAAC,GAAG,CAAC,CAAC,MAAM,MAC1B,WAAK,GAAG,EAAE,MAAM,CAAC,KAAK,IAEpB,aAAO,KAAK,EAAC,eAAe,IAC1B,aACE,KAAK,EAAC,gBAAgB,EACtB,OAAO,EAAE,MAAM,CAAC,SAAS,EACzB,QAAQ,EAAE,CAAC,KAAY,KACrB,IAAI,CAAC,kBAAkB,CACrB,MAAM,CAAC,KAAK,EACX,KAAK,CAAC,MAA2B,CAAC,OAAO,CAC3C,EAEH,IAAI,EAAC,UAAU,EACf,KAAK,EAAE,MAAM,CAAC,KAAK,GACnB,EACD,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CACzB,EAGP,MAAM,CAAC,SAAS;YACf,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,WAAW;gBAC9B,MAAM,UAAU,GAAG,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;gBACtD,QACE,aACE,KAAK,EAAC,oBAAoB,EAC1B,GAAG,EAAE,WAAW,CAAC,KAAK,EACtB,KAAK,EAAE,EAAE,UAAU,EAAE,MAAM,EAAE,IAE7B,aACE,KAAK,EAAC,qBAAqB,EAC3B,OAAO,EAAE,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,WAAW,CAAC,KAAK,CAAC,EACpD,QAAQ,EAAE,CAAC,KAAY,KACrB,IAAI,CAAC,kBAAkB,CACrB,WAAW,CAAC,KAAK,EAChB,KAAK,CAAC,MAA2B,CAAC,OAAO,CAC3C,EAEH,IAAI,EAAC,UAAU,EACf,KAAK,EAAE,WAAW,CAAC,KAAK,GACxB,EACD,IAAI,CAAC,WAAW,CAAC,UAAU,IAAI,EAAE,CAAC,CAC7B,EACR;aACH,CAAC,CACA,CACP,CAAC,CACE,EACN;KACH;;;;;;","names":[],"sources":["src/components/searchcraft-filters-list/searchcraft-filters-list.module.scss?tag=searchcraft-filters-list&encapsulation=shadow","src/components/searchcraft-filters-list/searchcraft-filters-list.tsx"],"sourcesContent":[".filtersList {\n  padding: 16px;\n  width: 100%;\n}\n\n.checkboxLabel {\n  align-items: center;\n  color: #292929;\n  display: flex;\n  font-size: 14px;\n  font-weight: 600;\n  gap: 12px;\n}\n\n.checkboxLabel input[type=\"checkbox\"] {\n  align-items: center;\n  appearance: none;\n  background-color:#EDEDED;\n  border: 1px solid #D9D9D9;\n  cursor: pointer;\n  display: flex;\n  height: 24px;\n  justify-content: center;\n  width: 24px;\n}\n\n.checkboxLabel input[type=\"checkbox\"]:checked {\n  background-color: #000;\n}\n\n.checkboxLabel input[type=\"checkbox\"]:checked::before {\n  color: #fff;\n  content: 'âœ”';\n  font-size: 14px;\n}\n\n.remainingFilterListCheckbox {\n  margin-left: 16px;\n}","import {\n  Component,\n  h,\n  State,\n  Prop,\n  Event,\n  type EventEmitter,\n} from '@stencil/core';\nimport { useSearchcraftStore } from '@provider/store';\nimport type { Facets } from '@searchcraft/core';\n\n@Component({\n  tag: 'searchcraft-filters-list',\n  styleUrl: 'searchcraft-filters-list.module.scss',\n  shadow: true,\n})\nexport class SearchcraftFiltersList {\n  @Prop() filters: Array<{ label: string; value: string }> = [];\n  @Event() filtersUpdated: EventEmitter<string[]>;\n\n  @State() dynamicFilters: Array<{ label: string; value: string }> = [];\n  @State() initialFilters: Array<{ label: string; value: string }> = [];\n  @State() isRequesting = false;\n  @State() selectedFilters: Set<string> = new Set();\n  @State() originalFilterCounts: Record<string, string> = {};\n  @State() query = '';\n  @State() resultsCount = 0;\n\n  private searchStore = useSearchcraftStore.getState();\n  unsubscribe: () => void;\n\n  connectedCallback() {\n    this.unsubscribe = useSearchcraftStore.subscribe((state) => {\n      this.isRequesting = state.isRequesting;\n      this.query = state.query || '';\n      this.resultsCount = state.searchResults?.data?.hits?.length || 0;\n\n      const facets = state.searchResults?.data.facets;\n      if (facets) {\n        this.populateFiltersFromFacets(facets);\n      }\n    });\n  }\n\n  disconnectedCallback() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n    }\n  }\n\n  populateFiltersFromFacets(facets: Facets) {\n    const newFilters = Object.entries(facets.section?.counts || {}).map(\n      ([key, count]) => {\n        const filterValue = key;\n        this.originalFilterCounts[filterValue] = `${count}`;\n        return {\n          label: `${key.replace(/^\\//, '')} (${count})`,\n          value: filterValue,\n        };\n      },\n    );\n\n    // Update dynamic filters while preserving the initial filters\n    const updatedFilters = [\n      ...this.initialFilters,\n      ...newFilters.filter(\n        (filter) =>\n          !this.initialFilters.some(\n            (initial) => initial.value === filter.value,\n          ),\n      ),\n    ];\n\n    this.dynamicFilters = updatedFilters;\n\n    // Store the initial filters only once\n    if (this.initialFilters.length === 0) {\n      this.initialFilters = [...updatedFilters];\n    }\n  }\n\n  handleFilterChange = (value: string, checked: boolean) => {\n    if (checked) {\n      this.selectedFilters.add(value);\n    } else {\n      this.selectedFilters.delete(value);\n    }\n\n    const selectedFiltersArray = Array.from(this.selectedFilters);\n\n    this.filtersUpdated.emit(selectedFiltersArray);\n    this.searchStore.setSelectedFilters(selectedFiltersArray);\n    this.searchStore.search();\n  };\n\n  formatLabel(label: string): string {\n    return label\n      .replace(/-/g, ' ') // Replace dashes with spaces\n      .split(' ') // Split words\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1)) // Capitalize the first letter\n      .join(' '); // Join words back into a single string\n  }\n\n  render() {\n    if (!this.query || this.resultsCount === 0) {\n      return null;\n    }\n\n    const filtersToRender = this.initialFilters.map((initialFilter) => {\n      const isChecked = this.selectedFilters.has(initialFilter.value);\n      const dynamicChildren = this.dynamicFilters.filter(\n        (dynamicFilter) =>\n          dynamicFilter.value.startsWith(initialFilter.value) &&\n          dynamicFilter.value !== initialFilter.value, // Exclude parent itself\n      );\n      return {\n        ...initialFilter,\n        isChecked,\n        children: dynamicChildren,\n      };\n    });\n\n    return (\n      <div class='filtersList'>\n        {filtersToRender.map((filter) => (\n          <div key={filter.value}>\n            {/* Render the parent filter */}\n            <label class='checkboxLabel'>\n              <input\n                class='filterCheckbox'\n                checked={filter.isChecked}\n                onChange={(event: Event) =>\n                  this.handleFilterChange(\n                    filter.value,\n                    (event.target as HTMLInputElement).checked,\n                  )\n                }\n                type='checkbox'\n                value={filter.value}\n              />\n              {this.formatLabel(filter.label)}\n            </label>\n\n            {/* Render dynamic child filters underneath the checked parent */}\n            {filter.isChecked &&\n              filter.children.map((childFilter) => {\n                const childLabel = childFilter.label.split('/').pop(); // Get only the part after the last '/'\n                return (\n                  <label\n                    class='childCheckboxLabel'\n                    key={childFilter.value}\n                    style={{ marginLeft: '20px' }} // Add indentation for child filters\n                  >\n                    <input\n                      class='childFilterCheckbox'\n                      checked={this.selectedFilters.has(childFilter.value)}\n                      onChange={(event: Event) =>\n                        this.handleFilterChange(\n                          childFilter.value,\n                          (event.target as HTMLInputElement).checked,\n                        )\n                      }\n                      type='checkbox'\n                      value={childFilter.value}\n                    />\n                    {this.formatLabel(childLabel || '')}\n                  </label>\n                );\n              })}\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n"],"version":3}