{"file":"searchcraft-filters-list.entry.esm.js","mappings":"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","names":[],"sources":["src/components/searchcraft-filters-list/searchcraft-filters-list.module.scss?tag=searchcraft-filters-list&encapsulation=shadow","src/components/searchcraft-filters-list/searchcraft-filters-list.tsx"],"sourcesContent":[".filtersList {\n  padding: 16px;\n}\n\n.checkboxLabel {\n  align-items: center;\n  color: #292929;\n  display: flex;\n  font-size: 14px;\n  font-weight: 600;\n  gap: 12px;\n}\n\n.checkboxLabel input[type=\"checkbox\"] {\n  align-items: center;\n  appearance: none;\n  background-color:#EDEDED;\n  border: 1px solid #D9D9D9;\n  cursor: pointer;\n  display: flex;\n  height: 24px;\n  justify-content: center;\n  width: 24px;\n}\n\n.checkboxLabel input[type=\"checkbox\"]:checked {\n  background-color: #000;\n}\n\n.checkboxLabel input[type=\"checkbox\"]:checked::before {\n  color: #fff;\n  content: 'âœ”';\n  font-size: 14px;\n}","import {\n  Component,\n  h,\n  State,\n  Prop,\n  Event,\n  type EventEmitter,\n} from '@stencil/core';\nimport { useSearchcraftStore } from '@provider/store';\nimport type { Facets } from '@searchcraft/core';\n\n@Component({\n  tag: 'searchcraft-filters-list',\n  styleUrl: 'searchcraft-filters-list.module.scss',\n  shadow: true,\n})\nexport class SearchcraftFiltersList {\n  @Prop() filters: Array<{ label: string; value: string }> = [];\n  @Event() filtersUpdated: EventEmitter<string[]>;\n\n  @State() dynamicFilters: Array<{ label: string; value: string }> = [];\n  @State() isRequesting = false;\n  @State() selectedFilters: Set<string> = new Set();\n  @State() originalFilterCounts: Record<string, string> = {};\n\n  private searchStore = useSearchcraftStore.getState();\n  unsubscribe: () => void;\n\n  connectedCallback() {\n    this.unsubscribe = useSearchcraftStore.subscribe((state) => {\n      this.isRequesting = state.isRequesting;\n      const facets = state.searchResults?.data.facets;\n      if (facets) {\n        this.populateFiltersFromFacets(facets);\n      }\n    });\n  }\n\n  disconnectedCallback() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n    }\n  }\n\n  populateFiltersFromFacets(facets: Facets) {\n    const newFilters = Object.entries(facets).flatMap(([facetKey, facetData]) =>\n      Object.entries(facetData.counts).map(([value, count]) => {\n        const filterValue = `${facetKey}:${value}`;\n        this.originalFilterCounts[filterValue] = `${count}`; // Store the original count\n        return {\n          label: `${facetKey}: ${value.replace(/^\\//, '')} (${count})`,\n          value: filterValue,\n        };\n      }),\n    );\n    this.dynamicFilters = newFilters;\n  }\n\n  handleFilterChange = (value: string, checked: boolean) => {\n    if (checked) {\n      this.selectedFilters.add(value);\n    } else {\n      this.selectedFilters.delete(value);\n    }\n\n    const selectedFiltersArray = Array.from(this.selectedFilters);\n    this.filtersUpdated.emit(selectedFiltersArray);\n    this.searchStore.setSelectedFilters(selectedFiltersArray);\n    this.searchStore.search();\n  };\n\n  render() {\n    const checkedFilters = Array.from(this.selectedFilters).map((value) => {\n      const count = this.originalFilterCounts[value] || '0';\n      return {\n        label: `${value.split(':')[1]} (${count})`,\n        value,\n      };\n    });\n\n    const remainingDynamicFilters = this.dynamicFilters.filter(\n      (filter) => !this.selectedFilters.has(filter.value),\n    );\n\n    if (this.isRequesting) {\n      return <div>Loading facets</div>;\n    }\n\n    return (\n      <div class='filtersList'>\n        {checkedFilters.map((filter) => (\n          <label class='checkboxLabel' key={filter.value}>\n            <input\n              class='filterListCheckbox'\n              checked\n              onChange={(event: Event) =>\n                this.handleFilterChange(\n                  filter.value,\n                  (event.target as HTMLInputElement).checked,\n                )\n              }\n              type='checkbox'\n              value={filter.value}\n            />\n            {filter.label}\n          </label>\n        ))}\n        {remainingDynamicFilters.map((filter) => {\n          const filterLabel = filter.label.split(':')[1] || filter.label;\n          return (\n            <label class='checkboxLabel' key={filter.value}>\n              <input\n                class='filterListCheckbox'\n                checked={this.selectedFilters.has(filter.value)}\n                onChange={(event: Event) =>\n                  this.handleFilterChange(\n                    filter.value,\n                    (event.target as HTMLInputElement).checked,\n                  )\n                }\n                type='checkbox'\n                value={filter.value}\n              />\n              {filterLabel}\n            </label>\n          );\n        })}\n      </div>\n    );\n  }\n}\n"],"version":3}