/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { CoreConfigSDK } from "@searchcraft/core";
export { CoreConfigSDK } from "@searchcraft/core";
export namespace Components {
    interface SearchcraftAutoSearchForm {
        "autoSearchFormClass": string;
        "clearInput": () => void;
        "config": CoreConfigSDK;
        "customStylesForInput": string | Record<string, string>;
        "inputCaptionValue": string;
        "inputIconHeight": number;
        "inputIconWidth": number;
        "labelForInput": string;
        "placeholderValue": string;
        "rightToLeftOrientation": boolean;
        "searchContainerClass": string;
    }
    interface SearchcraftBaseSearchForm {
        "config": CoreConfigSDK;
        "errorMessage": string;
        "labelForInput": string;
        "rightToLeftOrientation": boolean;
    }
    interface SearchcraftBaseSearchResult {
        "buttonText": string;
        "customStyles": string;
        "headingText": string;
        "imageDescription": string;
        "imageSource": string;
        "isInteractive": boolean;
        "primaryContent": string;
        "secondaryContent": string;
        "subheadingText": string;
        "tertiaryContent": string;
        "themeMode": 'light' | 'dark';
    }
    interface SearchcraftBaseSearchResults {
        "adInterval": number;
        "customStylesForResults": | string
    | Record<string, Record<string, string>>;
        "formatTime": boolean;
        "placeAdAtEnd": boolean;
        "placeAdAtStart": boolean;
        "searchKeys": string;
    }
    interface SearchcraftButton {
        "iconElement"?: Element;
        "iconOnly": boolean;
        "iconPosition": string;
        "label": string;
    }
    interface SearchcraftButtonIcon {
    }
    interface SearchcraftClearIconSet {
        /**
          * Type of the icon to display. Options: 'clear-light', 'clear-dark', 'arrow-light', 'arrow-dark'
         */
        "type": 'clear-light' | 'clear-dark' | 'arrow-light' | 'arrow-dark';
    }
    interface SearchcraftClearInputButton {
        "isRequesting"?: boolean;
        "rightToLeftOrientation": boolean;
    }
    interface SearchcraftErrorMessage {
        /**
          * The error message to display. Defaults to a standard message if not provided.
         */
        "errorMessage"?: string;
        /**
          * The theme, which determines the style (light or dark).
         */
        "theme": 'light' | 'dark';
    }
    interface SearchcraftFiltersList {
        "filters": Array<{ label: string; value: string }>;
    }
    interface SearchcraftInput {
        "customStyles": string | Record<string, string>;
        "error": boolean;
        "formClassName": string;
        "inputCaptionClassName": string;
        "inputCaptionValue": string;
        "inputClassName": string;
        "inputIconHeight": number;
        "inputIconWidth": number;
        "isRequesting": boolean;
        "placeholderValue": string;
        "query": string;
        "rightToLeftOrientation": boolean;
    }
    interface SearchcraftInputCaption {
        "error"?: boolean;
        "inputCaptionClassName"?: string;
        "inputCaptionValue": string;
        "rightToLeftOrientation": boolean;
    }
    interface SearchcraftInputIcon {
        /**
          * Determines if an error icon should be displayed.
         */
        "error"?: boolean;
        "height": number;
        /**
          * Determines if the layout should be right-to-left.
         */
        "rightToLeftOrientation": boolean;
        "width": number;
    }
    interface SearchcraftInputLabel {
        "inputLabelClassName"?: string;
        "label"?: string;
    }
    interface SearchcraftSearchIconSet {
        "height": number;
        /**
          * Type of the icon to display. Options: 'search-light', 'search-dark', 'error-light', 'error-dark'
         */
        "type": 'search-light' | 'search-dark' | 'error-light' | 'error-dark';
        "width": number;
    }
    interface SearchcraftSpinnerDark {
    }
    interface SearchcraftSpinnerLight {
    }
}
export interface SearchcraftAutoSearchFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSearchcraftAutoSearchFormElement;
}
export interface SearchcraftBaseSearchFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSearchcraftBaseSearchFormElement;
}
export interface SearchcraftBaseSearchResultCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSearchcraftBaseSearchResultElement;
}
export interface SearchcraftButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSearchcraftButtonElement;
}
export interface SearchcraftClearInputButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSearchcraftClearInputButtonElement;
}
export interface SearchcraftFiltersListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSearchcraftFiltersListElement;
}
export interface SearchcraftInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSearchcraftInputElement;
}
declare global {
    interface HTMLSearchcraftAutoSearchFormElementEventMap {
        "querySubmit": string;
    }
    interface HTMLSearchcraftAutoSearchFormElement extends Components.SearchcraftAutoSearchForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSearchcraftAutoSearchFormElementEventMap>(type: K, listener: (this: HTMLSearchcraftAutoSearchFormElement, ev: SearchcraftAutoSearchFormCustomEvent<HTMLSearchcraftAutoSearchFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSearchcraftAutoSearchFormElementEventMap>(type: K, listener: (this: HTMLSearchcraftAutoSearchFormElement, ev: SearchcraftAutoSearchFormCustomEvent<HTMLSearchcraftAutoSearchFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSearchcraftAutoSearchFormElement: {
        prototype: HTMLSearchcraftAutoSearchFormElement;
        new (): HTMLSearchcraftAutoSearchFormElement;
    };
    interface HTMLSearchcraftBaseSearchFormElementEventMap {
        "clearInput": any;
    }
    interface HTMLSearchcraftBaseSearchFormElement extends Components.SearchcraftBaseSearchForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSearchcraftBaseSearchFormElementEventMap>(type: K, listener: (this: HTMLSearchcraftBaseSearchFormElement, ev: SearchcraftBaseSearchFormCustomEvent<HTMLSearchcraftBaseSearchFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSearchcraftBaseSearchFormElementEventMap>(type: K, listener: (this: HTMLSearchcraftBaseSearchFormElement, ev: SearchcraftBaseSearchFormCustomEvent<HTMLSearchcraftBaseSearchFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSearchcraftBaseSearchFormElement: {
        prototype: HTMLSearchcraftBaseSearchFormElement;
        new (): HTMLSearchcraftBaseSearchFormElement;
    };
    interface HTMLSearchcraftBaseSearchResultElementEventMap {
        "buttonCallback": any;
        "keyDownCallback": any;
        "resultCallback": any;
    }
    interface HTMLSearchcraftBaseSearchResultElement extends Components.SearchcraftBaseSearchResult, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSearchcraftBaseSearchResultElementEventMap>(type: K, listener: (this: HTMLSearchcraftBaseSearchResultElement, ev: SearchcraftBaseSearchResultCustomEvent<HTMLSearchcraftBaseSearchResultElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSearchcraftBaseSearchResultElementEventMap>(type: K, listener: (this: HTMLSearchcraftBaseSearchResultElement, ev: SearchcraftBaseSearchResultCustomEvent<HTMLSearchcraftBaseSearchResultElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSearchcraftBaseSearchResultElement: {
        prototype: HTMLSearchcraftBaseSearchResultElement;
        new (): HTMLSearchcraftBaseSearchResultElement;
    };
    interface HTMLSearchcraftBaseSearchResultsElement extends Components.SearchcraftBaseSearchResults, HTMLStencilElement {
    }
    var HTMLSearchcraftBaseSearchResultsElement: {
        prototype: HTMLSearchcraftBaseSearchResultsElement;
        new (): HTMLSearchcraftBaseSearchResultsElement;
    };
    interface HTMLSearchcraftButtonElementEventMap {
        "buttonClick": void;
    }
    interface HTMLSearchcraftButtonElement extends Components.SearchcraftButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSearchcraftButtonElementEventMap>(type: K, listener: (this: HTMLSearchcraftButtonElement, ev: SearchcraftButtonCustomEvent<HTMLSearchcraftButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSearchcraftButtonElementEventMap>(type: K, listener: (this: HTMLSearchcraftButtonElement, ev: SearchcraftButtonCustomEvent<HTMLSearchcraftButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSearchcraftButtonElement: {
        prototype: HTMLSearchcraftButtonElement;
        new (): HTMLSearchcraftButtonElement;
    };
    interface HTMLSearchcraftButtonIconElement extends Components.SearchcraftButtonIcon, HTMLStencilElement {
    }
    var HTMLSearchcraftButtonIconElement: {
        prototype: HTMLSearchcraftButtonIconElement;
        new (): HTMLSearchcraftButtonIconElement;
    };
    interface HTMLSearchcraftClearIconSetElement extends Components.SearchcraftClearIconSet, HTMLStencilElement {
    }
    var HTMLSearchcraftClearIconSetElement: {
        prototype: HTMLSearchcraftClearIconSetElement;
        new (): HTMLSearchcraftClearIconSetElement;
    };
    interface HTMLSearchcraftClearInputButtonElementEventMap {
        "clearInput": void;
    }
    interface HTMLSearchcraftClearInputButtonElement extends Components.SearchcraftClearInputButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSearchcraftClearInputButtonElementEventMap>(type: K, listener: (this: HTMLSearchcraftClearInputButtonElement, ev: SearchcraftClearInputButtonCustomEvent<HTMLSearchcraftClearInputButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSearchcraftClearInputButtonElementEventMap>(type: K, listener: (this: HTMLSearchcraftClearInputButtonElement, ev: SearchcraftClearInputButtonCustomEvent<HTMLSearchcraftClearInputButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSearchcraftClearInputButtonElement: {
        prototype: HTMLSearchcraftClearInputButtonElement;
        new (): HTMLSearchcraftClearInputButtonElement;
    };
    interface HTMLSearchcraftErrorMessageElement extends Components.SearchcraftErrorMessage, HTMLStencilElement {
    }
    var HTMLSearchcraftErrorMessageElement: {
        prototype: HTMLSearchcraftErrorMessageElement;
        new (): HTMLSearchcraftErrorMessageElement;
    };
    interface HTMLSearchcraftFiltersListElementEventMap {
        "filtersUpdated": string[];
    }
    interface HTMLSearchcraftFiltersListElement extends Components.SearchcraftFiltersList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSearchcraftFiltersListElementEventMap>(type: K, listener: (this: HTMLSearchcraftFiltersListElement, ev: SearchcraftFiltersListCustomEvent<HTMLSearchcraftFiltersListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSearchcraftFiltersListElementEventMap>(type: K, listener: (this: HTMLSearchcraftFiltersListElement, ev: SearchcraftFiltersListCustomEvent<HTMLSearchcraftFiltersListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSearchcraftFiltersListElement: {
        prototype: HTMLSearchcraftFiltersListElement;
        new (): HTMLSearchcraftFiltersListElement;
    };
    interface HTMLSearchcraftInputElementEventMap {
        "clearInput": void;
        "searchInputChange": string;
    }
    interface HTMLSearchcraftInputElement extends Components.SearchcraftInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSearchcraftInputElementEventMap>(type: K, listener: (this: HTMLSearchcraftInputElement, ev: SearchcraftInputCustomEvent<HTMLSearchcraftInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSearchcraftInputElementEventMap>(type: K, listener: (this: HTMLSearchcraftInputElement, ev: SearchcraftInputCustomEvent<HTMLSearchcraftInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSearchcraftInputElement: {
        prototype: HTMLSearchcraftInputElement;
        new (): HTMLSearchcraftInputElement;
    };
    interface HTMLSearchcraftInputCaptionElement extends Components.SearchcraftInputCaption, HTMLStencilElement {
    }
    var HTMLSearchcraftInputCaptionElement: {
        prototype: HTMLSearchcraftInputCaptionElement;
        new (): HTMLSearchcraftInputCaptionElement;
    };
    interface HTMLSearchcraftInputIconElement extends Components.SearchcraftInputIcon, HTMLStencilElement {
    }
    var HTMLSearchcraftInputIconElement: {
        prototype: HTMLSearchcraftInputIconElement;
        new (): HTMLSearchcraftInputIconElement;
    };
    interface HTMLSearchcraftInputLabelElement extends Components.SearchcraftInputLabel, HTMLStencilElement {
    }
    var HTMLSearchcraftInputLabelElement: {
        prototype: HTMLSearchcraftInputLabelElement;
        new (): HTMLSearchcraftInputLabelElement;
    };
    interface HTMLSearchcraftSearchIconSetElement extends Components.SearchcraftSearchIconSet, HTMLStencilElement {
    }
    var HTMLSearchcraftSearchIconSetElement: {
        prototype: HTMLSearchcraftSearchIconSetElement;
        new (): HTMLSearchcraftSearchIconSetElement;
    };
    interface HTMLSearchcraftSpinnerDarkElement extends Components.SearchcraftSpinnerDark, HTMLStencilElement {
    }
    var HTMLSearchcraftSpinnerDarkElement: {
        prototype: HTMLSearchcraftSpinnerDarkElement;
        new (): HTMLSearchcraftSpinnerDarkElement;
    };
    interface HTMLSearchcraftSpinnerLightElement extends Components.SearchcraftSpinnerLight, HTMLStencilElement {
    }
    var HTMLSearchcraftSpinnerLightElement: {
        prototype: HTMLSearchcraftSpinnerLightElement;
        new (): HTMLSearchcraftSpinnerLightElement;
    };
    interface HTMLElementTagNameMap {
        "searchcraft-auto-search-form": HTMLSearchcraftAutoSearchFormElement;
        "searchcraft-base-search-form": HTMLSearchcraftBaseSearchFormElement;
        "searchcraft-base-search-result": HTMLSearchcraftBaseSearchResultElement;
        "searchcraft-base-search-results": HTMLSearchcraftBaseSearchResultsElement;
        "searchcraft-button": HTMLSearchcraftButtonElement;
        "searchcraft-button-icon": HTMLSearchcraftButtonIconElement;
        "searchcraft-clear-icon-set": HTMLSearchcraftClearIconSetElement;
        "searchcraft-clear-input-button": HTMLSearchcraftClearInputButtonElement;
        "searchcraft-error-message": HTMLSearchcraftErrorMessageElement;
        "searchcraft-filters-list": HTMLSearchcraftFiltersListElement;
        "searchcraft-input": HTMLSearchcraftInputElement;
        "searchcraft-input-caption": HTMLSearchcraftInputCaptionElement;
        "searchcraft-input-icon": HTMLSearchcraftInputIconElement;
        "searchcraft-input-label": HTMLSearchcraftInputLabelElement;
        "searchcraft-search-icon-set": HTMLSearchcraftSearchIconSetElement;
        "searchcraft-spinner-dark": HTMLSearchcraftSpinnerDarkElement;
        "searchcraft-spinner-light": HTMLSearchcraftSpinnerLightElement;
    }
}
declare namespace LocalJSX {
    interface SearchcraftAutoSearchForm {
        "autoSearchFormClass"?: string;
        "clearInput"?: () => void;
        "config"?: CoreConfigSDK;
        "customStylesForInput"?: string | Record<string, string>;
        "inputCaptionValue"?: string;
        "inputIconHeight"?: number;
        "inputIconWidth"?: number;
        "labelForInput"?: string;
        "onQuerySubmit"?: (event: SearchcraftAutoSearchFormCustomEvent<string>) => void;
        "placeholderValue"?: string;
        "rightToLeftOrientation"?: boolean;
        "searchContainerClass"?: string;
    }
    interface SearchcraftBaseSearchForm {
        "config"?: CoreConfigSDK;
        "errorMessage"?: string;
        "labelForInput"?: string;
        "onClearInput"?: (event: SearchcraftBaseSearchFormCustomEvent<any>) => void;
        "rightToLeftOrientation"?: boolean;
    }
    interface SearchcraftBaseSearchResult {
        "buttonText"?: string;
        "customStyles"?: string;
        "headingText"?: string;
        "imageDescription"?: string;
        "imageSource"?: string;
        "isInteractive"?: boolean;
        "onButtonCallback"?: (event: SearchcraftBaseSearchResultCustomEvent<any>) => void;
        "onKeyDownCallback"?: (event: SearchcraftBaseSearchResultCustomEvent<any>) => void;
        "onResultCallback"?: (event: SearchcraftBaseSearchResultCustomEvent<any>) => void;
        "primaryContent"?: string;
        "secondaryContent"?: string;
        "subheadingText"?: string;
        "tertiaryContent"?: string;
        "themeMode"?: 'light' | 'dark';
    }
    interface SearchcraftBaseSearchResults {
        "adInterval"?: number;
        "customStylesForResults"?: | string
    | Record<string, Record<string, string>>;
        "formatTime"?: boolean;
        "placeAdAtEnd"?: boolean;
        "placeAdAtStart"?: boolean;
        "searchKeys"?: string;
    }
    interface SearchcraftButton {
        "iconElement"?: Element;
        "iconOnly"?: boolean;
        "iconPosition"?: string;
        "label"?: string;
        "onButtonClick"?: (event: SearchcraftButtonCustomEvent<void>) => void;
    }
    interface SearchcraftButtonIcon {
    }
    interface SearchcraftClearIconSet {
        /**
          * Type of the icon to display. Options: 'clear-light', 'clear-dark', 'arrow-light', 'arrow-dark'
         */
        "type"?: 'clear-light' | 'clear-dark' | 'arrow-light' | 'arrow-dark';
    }
    interface SearchcraftClearInputButton {
        "isRequesting"?: boolean;
        "onClearInput"?: (event: SearchcraftClearInputButtonCustomEvent<void>) => void;
        "rightToLeftOrientation"?: boolean;
    }
    interface SearchcraftErrorMessage {
        /**
          * The error message to display. Defaults to a standard message if not provided.
         */
        "errorMessage"?: string;
        /**
          * The theme, which determines the style (light or dark).
         */
        "theme"?: 'light' | 'dark';
    }
    interface SearchcraftFiltersList {
        "filters"?: Array<{ label: string; value: string }>;
        "onFiltersUpdated"?: (event: SearchcraftFiltersListCustomEvent<string[]>) => void;
    }
    interface SearchcraftInput {
        "customStyles"?: string | Record<string, string>;
        "error"?: boolean;
        "formClassName"?: string;
        "inputCaptionClassName"?: string;
        "inputCaptionValue"?: string;
        "inputClassName"?: string;
        "inputIconHeight"?: number;
        "inputIconWidth"?: number;
        "isRequesting"?: boolean;
        "onClearInput"?: (event: SearchcraftInputCustomEvent<void>) => void;
        "onSearchInputChange"?: (event: SearchcraftInputCustomEvent<string>) => void;
        "placeholderValue"?: string;
        "query"?: string;
        "rightToLeftOrientation"?: boolean;
    }
    interface SearchcraftInputCaption {
        "error"?: boolean;
        "inputCaptionClassName"?: string;
        "inputCaptionValue"?: string;
        "rightToLeftOrientation"?: boolean;
    }
    interface SearchcraftInputIcon {
        /**
          * Determines if an error icon should be displayed.
         */
        "error"?: boolean;
        "height"?: number;
        /**
          * Determines if the layout should be right-to-left.
         */
        "rightToLeftOrientation"?: boolean;
        "width"?: number;
    }
    interface SearchcraftInputLabel {
        "inputLabelClassName"?: string;
        "label"?: string;
    }
    interface SearchcraftSearchIconSet {
        "height"?: number;
        /**
          * Type of the icon to display. Options: 'search-light', 'search-dark', 'error-light', 'error-dark'
         */
        "type"?: 'search-light' | 'search-dark' | 'error-light' | 'error-dark';
        "width"?: number;
    }
    interface SearchcraftSpinnerDark {
    }
    interface SearchcraftSpinnerLight {
    }
    interface IntrinsicElements {
        "searchcraft-auto-search-form": SearchcraftAutoSearchForm;
        "searchcraft-base-search-form": SearchcraftBaseSearchForm;
        "searchcraft-base-search-result": SearchcraftBaseSearchResult;
        "searchcraft-base-search-results": SearchcraftBaseSearchResults;
        "searchcraft-button": SearchcraftButton;
        "searchcraft-button-icon": SearchcraftButtonIcon;
        "searchcraft-clear-icon-set": SearchcraftClearIconSet;
        "searchcraft-clear-input-button": SearchcraftClearInputButton;
        "searchcraft-error-message": SearchcraftErrorMessage;
        "searchcraft-filters-list": SearchcraftFiltersList;
        "searchcraft-input": SearchcraftInput;
        "searchcraft-input-caption": SearchcraftInputCaption;
        "searchcraft-input-icon": SearchcraftInputIcon;
        "searchcraft-input-label": SearchcraftInputLabel;
        "searchcraft-search-icon-set": SearchcraftSearchIconSet;
        "searchcraft-spinner-dark": SearchcraftSpinnerDark;
        "searchcraft-spinner-light": SearchcraftSpinnerLight;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "searchcraft-auto-search-form": LocalJSX.SearchcraftAutoSearchForm & JSXBase.HTMLAttributes<HTMLSearchcraftAutoSearchFormElement>;
            "searchcraft-base-search-form": LocalJSX.SearchcraftBaseSearchForm & JSXBase.HTMLAttributes<HTMLSearchcraftBaseSearchFormElement>;
            "searchcraft-base-search-result": LocalJSX.SearchcraftBaseSearchResult & JSXBase.HTMLAttributes<HTMLSearchcraftBaseSearchResultElement>;
            "searchcraft-base-search-results": LocalJSX.SearchcraftBaseSearchResults & JSXBase.HTMLAttributes<HTMLSearchcraftBaseSearchResultsElement>;
            "searchcraft-button": LocalJSX.SearchcraftButton & JSXBase.HTMLAttributes<HTMLSearchcraftButtonElement>;
            "searchcraft-button-icon": LocalJSX.SearchcraftButtonIcon & JSXBase.HTMLAttributes<HTMLSearchcraftButtonIconElement>;
            "searchcraft-clear-icon-set": LocalJSX.SearchcraftClearIconSet & JSXBase.HTMLAttributes<HTMLSearchcraftClearIconSetElement>;
            "searchcraft-clear-input-button": LocalJSX.SearchcraftClearInputButton & JSXBase.HTMLAttributes<HTMLSearchcraftClearInputButtonElement>;
            "searchcraft-error-message": LocalJSX.SearchcraftErrorMessage & JSXBase.HTMLAttributes<HTMLSearchcraftErrorMessageElement>;
            "searchcraft-filters-list": LocalJSX.SearchcraftFiltersList & JSXBase.HTMLAttributes<HTMLSearchcraftFiltersListElement>;
            "searchcraft-input": LocalJSX.SearchcraftInput & JSXBase.HTMLAttributes<HTMLSearchcraftInputElement>;
            "searchcraft-input-caption": LocalJSX.SearchcraftInputCaption & JSXBase.HTMLAttributes<HTMLSearchcraftInputCaptionElement>;
            "searchcraft-input-icon": LocalJSX.SearchcraftInputIcon & JSXBase.HTMLAttributes<HTMLSearchcraftInputIconElement>;
            "searchcraft-input-label": LocalJSX.SearchcraftInputLabel & JSXBase.HTMLAttributes<HTMLSearchcraftInputLabelElement>;
            "searchcraft-search-icon-set": LocalJSX.SearchcraftSearchIconSet & JSXBase.HTMLAttributes<HTMLSearchcraftSearchIconSetElement>;
            "searchcraft-spinner-dark": LocalJSX.SearchcraftSpinnerDark & JSXBase.HTMLAttributes<HTMLSearchcraftSpinnerDarkElement>;
            "searchcraft-spinner-light": LocalJSX.SearchcraftSpinnerLight & JSXBase.HTMLAttributes<HTMLSearchcraftSpinnerLightElement>;
        }
    }
}
