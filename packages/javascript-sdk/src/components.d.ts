/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { PopoverResultMappings, SearchResultMappings } from "./types/index";
import { FilterItem } from "./types/searchcraft-filter-panel.types";
import { SearchcraftConfig } from "@searchcraft/core";
export { PopoverResultMappings, SearchResultMappings } from "./types/index";
export { FilterItem } from "./types/searchcraft-filter-panel.types";
export { SearchcraftConfig } from "@searchcraft/core";
export namespace Components {
    interface SearchcraftBaseSearchResult {
        "bodyContent": string | undefined;
        "buttonHref": string | undefined;
        "buttonLabel": string | undefined;
        "buttonRel": 'noreferrer' | 'noopener' | 'nofollow' | undefined;
        "buttonTarget": '_blank' | '_self' | '_top' | '_parent';
        "containerHref": string | undefined;
        "containerRel": 'noreferrer' | 'noopener' | 'nofollow' | undefined;
        "containerTarget": '_blank' | '_self' | '_top' | '_parent';
        "customStyles": string | undefined;
        "documentPosition": number;
        "footerContent": string | undefined;
        "imageAlt": string | undefined;
        "imagePlacement": 'left' | 'right';
        "imageSrc": string | undefined;
        "subtitleContent": string | undefined;
        "titleContent": string | undefined;
    }
    interface SearchcraftBaseSearchResults {
        "adInterval": number;
        "buttonLabel": string | undefined;
        "buttonRel": 'noreferrer' | 'noopener' | 'nofollow' | undefined;
        "buttonTarget": '_blank' | '_self' | '_top' | '_parent';
        "containerRel": 'noreferrer' | 'noopener' | 'nofollow' | undefined;
        "containerTarget": '_blank' | '_self' | '_top' | '_parent';
        "customStylesForResults": | string
    | Record<string, Record<string, string>>
    | undefined;
        "placeAdAtEnd": boolean;
        "placeAdAtStart": boolean;
        "resultImagePlacement": 'left' | 'right';
        "searchResultMappings": SearchResultMappings | undefined;
    }
    interface SearchcraftButton {
        "iconElement"?: Element;
        "iconOnly": boolean;
        "iconPosition": string;
        "label": string;
    }
    interface SearchcraftButtonIcon {
    }
    interface SearchcraftCheckIcon {
    }
    interface SearchcraftClearIconSet {
        /**
          * Type of the icon to display. Options: 'clear-light', 'clear-dark', 'arrow-light', 'arrow-dark'
         */
        "type": 'clear-light' | 'clear-dark' | 'arrow-light' | 'arrow-dark';
    }
    interface SearchcraftDashIcon {
    }
    interface SearchcraftErrorMessage {
        "errorMessage"?: string;
    }
    interface SearchcraftFacetList {
        "fieldName": string;
    }
    interface SearchcraftFilterPanel {
        "items": FilterItem[];
    }
    interface SearchcraftInputForm {
        /**
          * Whether or not to automatically submit the search term when the input changes.
         */
        "autoSearch": boolean;
        /**
          * The label for the submit button.
         */
        "buttonLabel": string | undefined;
        /**
          * Where to place the search button.
         */
        "buttonPlacement": 'left' | 'right' | 'none';
        /**
          * The Searchcraft config object.
         */
        "config": SearchcraftConfig | undefined;
        /**
          * A custom styles object to be applied to the input element.
         */
        "customStyles": string | Record<string, string>;
        /**
          * The duration to debounce the input's `inputChange` event.
         */
        "debounceDelay": number;
        /**
          * The label rendered above the input.
         */
        "inputLabel": string | undefined;
        /**
          * The input element's placeholder value.
         */
        "placeholderValue": string;
        /**
          * The starting value of the input element.
         */
        "searchTerm": string;
    }
    interface SearchcraftInputLabel {
        "inputLabelClassName"?: string;
        "label"?: string;
    }
    interface SearchcraftPopoverForm {
        "config": SearchcraftConfig | undefined;
        "popoverResultMappings": PopoverResultMappings | undefined;
        "type": 'inline' | 'fullscreen' | 'modal';
    }
    interface SearchcraftPopoverListView {
        "popoverResultMappings": PopoverResultMappings | undefined;
    }
    interface SearchcraftPopoverResult {
    }
    interface SearchcraftResultsInfo {
    }
    interface SearchcraftSearchIconSet {
        "height": number;
        /**
          * Type of the icon to display. Options: 'search-light', 'search-dark', 'error-light', 'error-dark'
         */
        "type": 'search-light' | 'search-dark' | 'error-light' | 'error-dark';
        "width": number;
    }
    interface SearchcraftSlider {
        "dataType": 'number' | 'date';
        "granularity": number;
        "max": number;
        "min": number;
    }
    interface SearchcraftToggleButton {
        /**
          * Type of the toggle - determines what it controls 'mode': toggles between 'fuzzy' and 'normal' 'sort': toggles between 'asc' and 'desc'
         */
        "label": string;
        "subLabel": string | undefined;
    }
}
export interface SearchcraftBaseSearchResultsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSearchcraftBaseSearchResultsElement;
}
export interface SearchcraftButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSearchcraftButtonElement;
}
export interface SearchcraftFacetListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSearchcraftFacetListElement;
}
export interface SearchcraftInputFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSearchcraftInputFormElement;
}
export interface SearchcraftSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSearchcraftSliderElement;
}
export interface SearchcraftToggleButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSearchcraftToggleButtonElement;
}
declare global {
    interface HTMLSearchcraftBaseSearchResultElement extends Components.SearchcraftBaseSearchResult, HTMLStencilElement {
    }
    var HTMLSearchcraftBaseSearchResultElement: {
        prototype: HTMLSearchcraftBaseSearchResultElement;
        new (): HTMLSearchcraftBaseSearchResultElement;
    };
    interface HTMLSearchcraftBaseSearchResultsElementEventMap {
        "noResults": void;
    }
    interface HTMLSearchcraftBaseSearchResultsElement extends Components.SearchcraftBaseSearchResults, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSearchcraftBaseSearchResultsElementEventMap>(type: K, listener: (this: HTMLSearchcraftBaseSearchResultsElement, ev: SearchcraftBaseSearchResultsCustomEvent<HTMLSearchcraftBaseSearchResultsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSearchcraftBaseSearchResultsElementEventMap>(type: K, listener: (this: HTMLSearchcraftBaseSearchResultsElement, ev: SearchcraftBaseSearchResultsCustomEvent<HTMLSearchcraftBaseSearchResultsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSearchcraftBaseSearchResultsElement: {
        prototype: HTMLSearchcraftBaseSearchResultsElement;
        new (): HTMLSearchcraftBaseSearchResultsElement;
    };
    interface HTMLSearchcraftButtonElementEventMap {
        "buttonClick": void;
    }
    interface HTMLSearchcraftButtonElement extends Components.SearchcraftButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSearchcraftButtonElementEventMap>(type: K, listener: (this: HTMLSearchcraftButtonElement, ev: SearchcraftButtonCustomEvent<HTMLSearchcraftButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSearchcraftButtonElementEventMap>(type: K, listener: (this: HTMLSearchcraftButtonElement, ev: SearchcraftButtonCustomEvent<HTMLSearchcraftButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSearchcraftButtonElement: {
        prototype: HTMLSearchcraftButtonElement;
        new (): HTMLSearchcraftButtonElement;
    };
    interface HTMLSearchcraftButtonIconElement extends Components.SearchcraftButtonIcon, HTMLStencilElement {
    }
    var HTMLSearchcraftButtonIconElement: {
        prototype: HTMLSearchcraftButtonIconElement;
        new (): HTMLSearchcraftButtonIconElement;
    };
    interface HTMLSearchcraftCheckIconElement extends Components.SearchcraftCheckIcon, HTMLStencilElement {
    }
    var HTMLSearchcraftCheckIconElement: {
        prototype: HTMLSearchcraftCheckIconElement;
        new (): HTMLSearchcraftCheckIconElement;
    };
    interface HTMLSearchcraftClearIconSetElement extends Components.SearchcraftClearIconSet, HTMLStencilElement {
    }
    var HTMLSearchcraftClearIconSetElement: {
        prototype: HTMLSearchcraftClearIconSetElement;
        new (): HTMLSearchcraftClearIconSetElement;
    };
    interface HTMLSearchcraftDashIconElement extends Components.SearchcraftDashIcon, HTMLStencilElement {
    }
    var HTMLSearchcraftDashIconElement: {
        prototype: HTMLSearchcraftDashIconElement;
        new (): HTMLSearchcraftDashIconElement;
    };
    interface HTMLSearchcraftErrorMessageElement extends Components.SearchcraftErrorMessage, HTMLStencilElement {
    }
    var HTMLSearchcraftErrorMessageElement: {
        prototype: HTMLSearchcraftErrorMessageElement;
        new (): HTMLSearchcraftErrorMessageElement;
    };
    interface HTMLSearchcraftFacetListElementEventMap {
        "facetSelectionUpdated": { paths: string[] };
    }
    interface HTMLSearchcraftFacetListElement extends Components.SearchcraftFacetList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSearchcraftFacetListElementEventMap>(type: K, listener: (this: HTMLSearchcraftFacetListElement, ev: SearchcraftFacetListCustomEvent<HTMLSearchcraftFacetListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSearchcraftFacetListElementEventMap>(type: K, listener: (this: HTMLSearchcraftFacetListElement, ev: SearchcraftFacetListCustomEvent<HTMLSearchcraftFacetListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSearchcraftFacetListElement: {
        prototype: HTMLSearchcraftFacetListElement;
        new (): HTMLSearchcraftFacetListElement;
    };
    interface HTMLSearchcraftFilterPanelElement extends Components.SearchcraftFilterPanel, HTMLStencilElement {
    }
    var HTMLSearchcraftFilterPanelElement: {
        prototype: HTMLSearchcraftFilterPanelElement;
        new (): HTMLSearchcraftFilterPanelElement;
    };
    interface HTMLSearchcraftInputFormElementEventMap {
        "inputCleared": void;
        "noResultsReceived": void;
        "inputFocus": void;
        "inputBlur": void;
    }
    interface HTMLSearchcraftInputFormElement extends Components.SearchcraftInputForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSearchcraftInputFormElementEventMap>(type: K, listener: (this: HTMLSearchcraftInputFormElement, ev: SearchcraftInputFormCustomEvent<HTMLSearchcraftInputFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSearchcraftInputFormElementEventMap>(type: K, listener: (this: HTMLSearchcraftInputFormElement, ev: SearchcraftInputFormCustomEvent<HTMLSearchcraftInputFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSearchcraftInputFormElement: {
        prototype: HTMLSearchcraftInputFormElement;
        new (): HTMLSearchcraftInputFormElement;
    };
    interface HTMLSearchcraftInputLabelElement extends Components.SearchcraftInputLabel, HTMLStencilElement {
    }
    var HTMLSearchcraftInputLabelElement: {
        prototype: HTMLSearchcraftInputLabelElement;
        new (): HTMLSearchcraftInputLabelElement;
    };
    interface HTMLSearchcraftPopoverFormElement extends Components.SearchcraftPopoverForm, HTMLStencilElement {
    }
    var HTMLSearchcraftPopoverFormElement: {
        prototype: HTMLSearchcraftPopoverFormElement;
        new (): HTMLSearchcraftPopoverFormElement;
    };
    interface HTMLSearchcraftPopoverListViewElement extends Components.SearchcraftPopoverListView, HTMLStencilElement {
    }
    var HTMLSearchcraftPopoverListViewElement: {
        prototype: HTMLSearchcraftPopoverListViewElement;
        new (): HTMLSearchcraftPopoverListViewElement;
    };
    interface HTMLSearchcraftPopoverResultElement extends Components.SearchcraftPopoverResult, HTMLStencilElement {
    }
    var HTMLSearchcraftPopoverResultElement: {
        prototype: HTMLSearchcraftPopoverResultElement;
        new (): HTMLSearchcraftPopoverResultElement;
    };
    interface HTMLSearchcraftResultsInfoElement extends Components.SearchcraftResultsInfo, HTMLStencilElement {
    }
    var HTMLSearchcraftResultsInfoElement: {
        prototype: HTMLSearchcraftResultsInfoElement;
        new (): HTMLSearchcraftResultsInfoElement;
    };
    interface HTMLSearchcraftSearchIconSetElement extends Components.SearchcraftSearchIconSet, HTMLStencilElement {
    }
    var HTMLSearchcraftSearchIconSetElement: {
        prototype: HTMLSearchcraftSearchIconSetElement;
        new (): HTMLSearchcraftSearchIconSetElement;
    };
    interface HTMLSearchcraftSliderElementEventMap {
        "rangeChanged": { startValue: number; endValue: number };
    }
    interface HTMLSearchcraftSliderElement extends Components.SearchcraftSlider, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSearchcraftSliderElementEventMap>(type: K, listener: (this: HTMLSearchcraftSliderElement, ev: SearchcraftSliderCustomEvent<HTMLSearchcraftSliderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSearchcraftSliderElementEventMap>(type: K, listener: (this: HTMLSearchcraftSliderElement, ev: SearchcraftSliderCustomEvent<HTMLSearchcraftSliderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSearchcraftSliderElement: {
        prototype: HTMLSearchcraftSliderElement;
        new (): HTMLSearchcraftSliderElement;
    };
    interface HTMLSearchcraftToggleButtonElementEventMap {
        "toggleUpdated": boolean;
    }
    interface HTMLSearchcraftToggleButtonElement extends Components.SearchcraftToggleButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSearchcraftToggleButtonElementEventMap>(type: K, listener: (this: HTMLSearchcraftToggleButtonElement, ev: SearchcraftToggleButtonCustomEvent<HTMLSearchcraftToggleButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSearchcraftToggleButtonElementEventMap>(type: K, listener: (this: HTMLSearchcraftToggleButtonElement, ev: SearchcraftToggleButtonCustomEvent<HTMLSearchcraftToggleButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSearchcraftToggleButtonElement: {
        prototype: HTMLSearchcraftToggleButtonElement;
        new (): HTMLSearchcraftToggleButtonElement;
    };
    interface HTMLElementTagNameMap {
        "searchcraft-base-search-result": HTMLSearchcraftBaseSearchResultElement;
        "searchcraft-base-search-results": HTMLSearchcraftBaseSearchResultsElement;
        "searchcraft-button": HTMLSearchcraftButtonElement;
        "searchcraft-button-icon": HTMLSearchcraftButtonIconElement;
        "searchcraft-check-icon": HTMLSearchcraftCheckIconElement;
        "searchcraft-clear-icon-set": HTMLSearchcraftClearIconSetElement;
        "searchcraft-dash-icon": HTMLSearchcraftDashIconElement;
        "searchcraft-error-message": HTMLSearchcraftErrorMessageElement;
        "searchcraft-facet-list": HTMLSearchcraftFacetListElement;
        "searchcraft-filter-panel": HTMLSearchcraftFilterPanelElement;
        "searchcraft-input-form": HTMLSearchcraftInputFormElement;
        "searchcraft-input-label": HTMLSearchcraftInputLabelElement;
        "searchcraft-popover-form": HTMLSearchcraftPopoverFormElement;
        "searchcraft-popover-list-view": HTMLSearchcraftPopoverListViewElement;
        "searchcraft-popover-result": HTMLSearchcraftPopoverResultElement;
        "searchcraft-results-info": HTMLSearchcraftResultsInfoElement;
        "searchcraft-search-icon-set": HTMLSearchcraftSearchIconSetElement;
        "searchcraft-slider": HTMLSearchcraftSliderElement;
        "searchcraft-toggle-button": HTMLSearchcraftToggleButtonElement;
    }
}
declare namespace LocalJSX {
    interface SearchcraftBaseSearchResult {
        "bodyContent"?: string | undefined;
        "buttonHref"?: string | undefined;
        "buttonLabel"?: string | undefined;
        "buttonRel"?: 'noreferrer' | 'noopener' | 'nofollow' | undefined;
        "buttonTarget"?: '_blank' | '_self' | '_top' | '_parent';
        "containerHref"?: string | undefined;
        "containerRel"?: 'noreferrer' | 'noopener' | 'nofollow' | undefined;
        "containerTarget"?: '_blank' | '_self' | '_top' | '_parent';
        "customStyles"?: string | undefined;
        "documentPosition"?: number;
        "footerContent"?: string | undefined;
        "imageAlt"?: string | undefined;
        "imagePlacement"?: 'left' | 'right';
        "imageSrc"?: string | undefined;
        "subtitleContent"?: string | undefined;
        "titleContent"?: string | undefined;
    }
    interface SearchcraftBaseSearchResults {
        "adInterval"?: number;
        "buttonLabel"?: string | undefined;
        "buttonRel"?: 'noreferrer' | 'noopener' | 'nofollow' | undefined;
        "buttonTarget"?: '_blank' | '_self' | '_top' | '_parent';
        "containerRel"?: 'noreferrer' | 'noopener' | 'nofollow' | undefined;
        "containerTarget"?: '_blank' | '_self' | '_top' | '_parent';
        "customStylesForResults"?: | string
    | Record<string, Record<string, string>>
    | undefined;
        "onNoResults"?: (event: SearchcraftBaseSearchResultsCustomEvent<void>) => void;
        "placeAdAtEnd"?: boolean;
        "placeAdAtStart"?: boolean;
        "resultImagePlacement"?: 'left' | 'right';
        "searchResultMappings"?: SearchResultMappings | undefined;
    }
    interface SearchcraftButton {
        "iconElement"?: Element;
        "iconOnly"?: boolean;
        "iconPosition"?: string;
        "label"?: string;
        "onButtonClick"?: (event: SearchcraftButtonCustomEvent<void>) => void;
    }
    interface SearchcraftButtonIcon {
    }
    interface SearchcraftCheckIcon {
    }
    interface SearchcraftClearIconSet {
        /**
          * Type of the icon to display. Options: 'clear-light', 'clear-dark', 'arrow-light', 'arrow-dark'
         */
        "type"?: 'clear-light' | 'clear-dark' | 'arrow-light' | 'arrow-dark';
    }
    interface SearchcraftDashIcon {
    }
    interface SearchcraftErrorMessage {
        "errorMessage"?: string;
    }
    interface SearchcraftFacetList {
        "fieldName"?: string;
        "onFacetSelectionUpdated"?: (event: SearchcraftFacetListCustomEvent<{ paths: string[] }>) => void;
    }
    interface SearchcraftFilterPanel {
        "items"?: FilterItem[];
    }
    interface SearchcraftInputForm {
        /**
          * Whether or not to automatically submit the search term when the input changes.
         */
        "autoSearch"?: boolean;
        /**
          * The label for the submit button.
         */
        "buttonLabel"?: string | undefined;
        /**
          * Where to place the search button.
         */
        "buttonPlacement"?: 'left' | 'right' | 'none';
        /**
          * The Searchcraft config object.
         */
        "config"?: SearchcraftConfig | undefined;
        /**
          * A custom styles object to be applied to the input element.
         */
        "customStyles"?: string | Record<string, string>;
        /**
          * The duration to debounce the input's `inputChange` event.
         */
        "debounceDelay"?: number;
        /**
          * The label rendered above the input.
         */
        "inputLabel"?: string | undefined;
        "onInputBlur"?: (event: SearchcraftInputFormCustomEvent<void>) => void;
        "onInputCleared"?: (event: SearchcraftInputFormCustomEvent<void>) => void;
        "onInputFocus"?: (event: SearchcraftInputFormCustomEvent<void>) => void;
        "onNoResultsReceived"?: (event: SearchcraftInputFormCustomEvent<void>) => void;
        /**
          * The input element's placeholder value.
         */
        "placeholderValue"?: string;
        /**
          * The starting value of the input element.
         */
        "searchTerm"?: string;
    }
    interface SearchcraftInputLabel {
        "inputLabelClassName"?: string;
        "label"?: string;
    }
    interface SearchcraftPopoverForm {
        "config"?: SearchcraftConfig | undefined;
        "popoverResultMappings"?: PopoverResultMappings | undefined;
        "type"?: 'inline' | 'fullscreen' | 'modal';
    }
    interface SearchcraftPopoverListView {
        "popoverResultMappings"?: PopoverResultMappings | undefined;
    }
    interface SearchcraftPopoverResult {
    }
    interface SearchcraftResultsInfo {
    }
    interface SearchcraftSearchIconSet {
        "height"?: number;
        /**
          * Type of the icon to display. Options: 'search-light', 'search-dark', 'error-light', 'error-dark'
         */
        "type"?: 'search-light' | 'search-dark' | 'error-light' | 'error-dark';
        "width"?: number;
    }
    interface SearchcraftSlider {
        "dataType"?: 'number' | 'date';
        "granularity"?: number;
        "max"?: number;
        "min"?: number;
        "onRangeChanged"?: (event: SearchcraftSliderCustomEvent<{ startValue: number; endValue: number }>) => void;
    }
    interface SearchcraftToggleButton {
        /**
          * Type of the toggle - determines what it controls 'mode': toggles between 'fuzzy' and 'normal' 'sort': toggles between 'asc' and 'desc'
         */
        "label"?: string;
        "onToggleUpdated"?: (event: SearchcraftToggleButtonCustomEvent<boolean>) => void;
        "subLabel"?: string | undefined;
    }
    interface IntrinsicElements {
        "searchcraft-base-search-result": SearchcraftBaseSearchResult;
        "searchcraft-base-search-results": SearchcraftBaseSearchResults;
        "searchcraft-button": SearchcraftButton;
        "searchcraft-button-icon": SearchcraftButtonIcon;
        "searchcraft-check-icon": SearchcraftCheckIcon;
        "searchcraft-clear-icon-set": SearchcraftClearIconSet;
        "searchcraft-dash-icon": SearchcraftDashIcon;
        "searchcraft-error-message": SearchcraftErrorMessage;
        "searchcraft-facet-list": SearchcraftFacetList;
        "searchcraft-filter-panel": SearchcraftFilterPanel;
        "searchcraft-input-form": SearchcraftInputForm;
        "searchcraft-input-label": SearchcraftInputLabel;
        "searchcraft-popover-form": SearchcraftPopoverForm;
        "searchcraft-popover-list-view": SearchcraftPopoverListView;
        "searchcraft-popover-result": SearchcraftPopoverResult;
        "searchcraft-results-info": SearchcraftResultsInfo;
        "searchcraft-search-icon-set": SearchcraftSearchIconSet;
        "searchcraft-slider": SearchcraftSlider;
        "searchcraft-toggle-button": SearchcraftToggleButton;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "searchcraft-base-search-result": LocalJSX.SearchcraftBaseSearchResult & JSXBase.HTMLAttributes<HTMLSearchcraftBaseSearchResultElement>;
            "searchcraft-base-search-results": LocalJSX.SearchcraftBaseSearchResults & JSXBase.HTMLAttributes<HTMLSearchcraftBaseSearchResultsElement>;
            "searchcraft-button": LocalJSX.SearchcraftButton & JSXBase.HTMLAttributes<HTMLSearchcraftButtonElement>;
            "searchcraft-button-icon": LocalJSX.SearchcraftButtonIcon & JSXBase.HTMLAttributes<HTMLSearchcraftButtonIconElement>;
            "searchcraft-check-icon": LocalJSX.SearchcraftCheckIcon & JSXBase.HTMLAttributes<HTMLSearchcraftCheckIconElement>;
            "searchcraft-clear-icon-set": LocalJSX.SearchcraftClearIconSet & JSXBase.HTMLAttributes<HTMLSearchcraftClearIconSetElement>;
            "searchcraft-dash-icon": LocalJSX.SearchcraftDashIcon & JSXBase.HTMLAttributes<HTMLSearchcraftDashIconElement>;
            "searchcraft-error-message": LocalJSX.SearchcraftErrorMessage & JSXBase.HTMLAttributes<HTMLSearchcraftErrorMessageElement>;
            "searchcraft-facet-list": LocalJSX.SearchcraftFacetList & JSXBase.HTMLAttributes<HTMLSearchcraftFacetListElement>;
            "searchcraft-filter-panel": LocalJSX.SearchcraftFilterPanel & JSXBase.HTMLAttributes<HTMLSearchcraftFilterPanelElement>;
            "searchcraft-input-form": LocalJSX.SearchcraftInputForm & JSXBase.HTMLAttributes<HTMLSearchcraftInputFormElement>;
            "searchcraft-input-label": LocalJSX.SearchcraftInputLabel & JSXBase.HTMLAttributes<HTMLSearchcraftInputLabelElement>;
            "searchcraft-popover-form": LocalJSX.SearchcraftPopoverForm & JSXBase.HTMLAttributes<HTMLSearchcraftPopoverFormElement>;
            "searchcraft-popover-list-view": LocalJSX.SearchcraftPopoverListView & JSXBase.HTMLAttributes<HTMLSearchcraftPopoverListViewElement>;
            "searchcraft-popover-result": LocalJSX.SearchcraftPopoverResult & JSXBase.HTMLAttributes<HTMLSearchcraftPopoverResultElement>;
            "searchcraft-results-info": LocalJSX.SearchcraftResultsInfo & JSXBase.HTMLAttributes<HTMLSearchcraftResultsInfoElement>;
            "searchcraft-search-icon-set": LocalJSX.SearchcraftSearchIconSet & JSXBase.HTMLAttributes<HTMLSearchcraftSearchIconSetElement>;
            "searchcraft-slider": LocalJSX.SearchcraftSlider & JSXBase.HTMLAttributes<HTMLSearchcraftSliderElement>;
            "searchcraft-toggle-button": LocalJSX.SearchcraftToggleButton & JSXBase.HTMLAttributes<HTMLSearchcraftToggleButtonElement>;
        }
    }
}
