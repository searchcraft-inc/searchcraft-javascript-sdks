/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AdClientResponseItem, FilterItem, PopoverResultMappings, ResultsInfoTemplate, SearchClientResponseItem, SearchcraftAdSource, SearchcraftCore, SearchResultTemplate, SearchResultTemplateData } from "@searchcraft/core";
import { SearchcraftSelectOption } from "./components/searchcraft-select/searchcraft-select";
export { AdClientResponseItem, FilterItem, PopoverResultMappings, ResultsInfoTemplate, SearchClientResponseItem, SearchcraftAdSource, SearchcraftCore, SearchResultTemplate, SearchResultTemplateData } from "@searchcraft/core";
export { SearchcraftSelectOption } from "./components/searchcraft-select/searchcraft-select";
export namespace Components {
    /**
     * An inline ad meant to be rendered in a list of search results.
     */
    interface SearchcraftAd {
        "adClientResponseItem"?: AdClientResponseItem;
        "adContainerId": string;
        "adSource": SearchcraftAdSource;
    }
    /**
     * This web component represents a button.
     * It provides a clear, interactive way for users to submit search queries or trigger actions in a search interface.
     */
    interface SearchcraftButton {
        /**
          * Whether the button is disabled.
         */
        "disabled"?: boolean;
        /**
          * Controls the visual representation of the button.
         */
        "hierarchy"?: 'primary' | 'tertiary';
        /**
          * The icon element.
         */
        "icon"?: Element;
        /**
          * Should the button only display an icon.
         */
        "iconOnly"?: boolean;
        /**
          * The position of the icon.
         */
        "iconPosition"?: 'left' | 'right';
        /**
          * The label for the button.
         */
        "label": string;
        /**
          * The type of the button.
         */
        "type"?: 'submit' | 'reset' | 'button';
    }
    /**
     * This web component is designed to display a user-friendly error message when a search query fails, providing clear feedback to users and enhancing their experience when an issue arises during the search process.
     * @js-example ```html
     * <searchcraft-error-message>
     *   No search results found for query
     * </searchcraft-error-message>
     * ```
     */
    interface SearchcraftErrorMessage {
    }
    /**
     * This web component is designed to display facets in a search interface, allowing users to refine their search results by applying filters based on various attributes.
     * It is consumed within the `searchcraft-filter-panel`.
     * @js-example ```html
     * <!-- index.html -->
     * <searchcraft-facet-list field-name="title" />
     * ```
     * ```js
     * // index.js
     * const facetList = document.querySelector('searchcraft-facet-list');
     * facetList.addEventListener('facetSelectionUpdated', () => {
     *   console.log('Facet selection updated');
     * });
     * ```
     */
    interface SearchcraftFacetList {
        /**
          * The name of the field where facets are applied.
         */
        "fieldName": string;
    }
    /**
     * This web component represents a series of filters that allows users to refine and control their search queries by applying various filter criteria.
     * @react-import ```jsx
     * import { SearchcraftFilterPanel } from "@searchcraft/react-sdk";
     * ```
     * @vue-import ```jsx
     * import { SearchcraftFilterPanel } from "@searchcraft/vue-sdk";
     * ```
     * @js-example ```html
     * <!-- index.html -->
     * <searchcraft-filter-panel />
     * ```
     * ```js
     * // index.js
     * const filterPanel = document.querySelector('searchcraft-filter-panel');
     * if (filterPanel) {
     *   filterPanel.items = [];
     * }
     * ```
     * @react-example ```jsx
     * <SearchcraftFilterPanel items={[]} />
     * ```
     * @vue-example ```jsx
     * <SearchcraftFilterPanel :items="[]" />
     * ```
     */
    interface SearchcraftFilterPanel {
        /**
          * The items to filter.
         */
        "items": FilterItem[];
    }
    /**
     * This web component provides a user-friendly interface for querying an indexed dataset, enabling users to easily search large collections of data.
     * It abstracts the complexities of index-based searching, making it accessible to users of all technical levels.
     * @react-import ```jsx
     * import { SearchcraftInputForm } from "@searchcraft/react-sdk";
     * ```
     * @vue-import ```jsx
     * import { SearchcraftInputForm } from "@searchcraft/vue-sdk";
     * ```
     * @js-example ```html
     * <searchcraft-input-form auto-search />
     * ```
     * @react-example ```jsx
     * <SearchcraftInputForm autoSearch />
     * ```
     * @vue-example ```jsx
     * <SearchcraftInputForm autoSearch />
     * ```
     */
    interface SearchcraftInputForm {
        /**
          * Whether or not to automatically submit the search term when the input changes.
         */
        "autoSearch"?: boolean;
        /**
          * The label for the submit button.
         */
        "buttonLabel"?: string;
        /**
          * Where to place the search button.
         */
        "buttonPlacement"?: 'left' | 'right' | 'none';
        "core"?: SearchcraftCore;
        /**
          * The label rendered above the input.
         */
        "inputLabel"?: string;
        /**
          * The input element's placeholder value.
         */
        "placeholderValue"?: string;
    }
    /**
     * This web component serves as the input label for the searchcraft-input-form component.
     * @js-example ```html
     * <searchcraft-input-label label="Search" />
     * ```
     */
    interface SearchcraftInputLabel {
        /**
          * The classname applied to the label element.
         */
        "inputLabelClassName"?: string | undefined;
        "label": string;
    }
    /**
     * This web component is designed to facilitate pagination of search results. Once a query is submitted, calculates the number for pages.
     * @react-import ```jsx
     * import { SearchcraftPagination } from "@searchcraft/react-sdk";
     * ```
     * @vue-import ```jsx
     * import { SearchcraftPagination } from "@searchcraft/vue-sdk";
     * ```
     * @js-example ```html
     * <searchcraft-pagination />
     * ```
     * @react-example ```jsx
     * <SearchcraftPagination />
     * ```
     * @vue-example ```jsx
     * <SearchcraftPagination />
     * ```
     */
    interface SearchcraftPagination {
    }
    /**
     * Renders a button which, when clicked, turns on popover visibility.
     * @react-import ```jsx
     * import { SearchcraftPopoverButton } from "@searchcraft/react-sdk";
     * ````
     * @vue-import ```jsx
     * import { SearchcraftPopoverButton } from "@searchcraft/vue-sdk";
     * ```
     * @js-example ```html
     * <searchcraft-popover-button>
     *   Open popover
     * </searchcraft-popover-button>
     * ```
     * @react-example ```jsx
     * <SearchcraftPopoverButton>
     *   Open popover
     * </SearchcraftPopoverButton>
     * ```
     * @vue-example ```jsx
     * <SearchcraftPopoverButton>
     *   Open popover
     * </SearchcraftPopoverButton>
     * ```
     */
    interface SearchcraftPopoverButton {
        /**
          * The type of popover button to render.
         */
        "type"?: 'skeuomorphic';
    }
    /**
     * Renders the footer for the searchcraft-popover-form.
     */
    interface SearchcraftPopoverFooter {
    }
    /**
     * This web component is designed to display search results in a popover container that dynamically appears when the user interacts with a search input field, or when a popover-button is pressed.
     * @react-import ```jsx
     * import { SearchcraftPopoverForm } from "@searchcraft/react-sdk";
     * ```
     * @vue-import ```jsx
     * import { SearchcraftPopoverForm } from "@searchcraft/vue-sdk";
     * ```
     * @js-example ```html
     * <!-- index.html -->
     * <searchcraft-popover-form type="inline" />
     * ```
     * ```js
     * // index.js
     * const popoverForm = document.querySelector('searchcraft-popover-form');
     * popoverForm.popoverResultMappings = {};
     * ```
     * @react-example ```jsx
     * <SearchcraftPopoverForm type="inline" popoverResultMappings={[]} />
     * ```
     * @vue-example ```jsx
     * <SearchcraftPopoverForm type="inline" :popoverResultMappings="[]"" />
     * ```
     */
    interface SearchcraftPopoverForm {
        /**
          * The hotkey that activates the popover.
         */
        "hotkey"?: string;
        /**
          * The hotkey modifier that activates the popover. Used together with the `hotkey` prop.
         */
        "hotkeyModifier"?: 'ctrl' | 'meta' | 'alt' | 'option';
        /**
          * Formats the content rendered for each result.
         */
        "popoverResultMappings"?: PopoverResultMappings;
        /**
          * The type of popover form to render. - `inline` - Renders inline with the rest of the content on the page. The search results pop over the page content. - `fullscreen` - Renders in fullscreen view. Used together with the `searchcraft-popover-button` component. - `modal` - Renders in a modal view. Used together with the `searchcraft-popover-button` component.
         */
        "type"?: 'inline' | 'fullscreen' | 'modal';
    }
    /**
     * A single list item rendered in a searchcraft-popover-list-view.
     */
    interface SearchcraftPopoverListItem {
        /**
          * The document position relative to the search results (For Measure)
         */
        "documentPosition": number;
        "item": SearchClientResponseItem | undefined;
        "popoverResultMappings": PopoverResultMappings | undefined;
    }
    /**
     * This web component is designed to display a list of results within a popover interface.
     * It is consumed within the `searchcraft-popover-form` component.
     * @js-example ```html
     * <searchcraft-popover-list-view />
     * ```
     */
    interface SearchcraftPopoverListView {
        "adClientResponseItems": AdClientResponseItem[] | undefined;
        /**
          * The mappings that define how the data in the documents are mapped to the list-view-item elements.
         */
        "popoverResultMappings": PopoverResultMappings | undefined;
        /**
          * The items to render in the list view.
         */
        "searchClientResponseItems": SearchClientResponseItem[] | undefined;
        "searchResultsPage": number;
        "searchResultsPerPage": number;
    }
    /**
     * This web component is designed to display the number of results returned from a search query.
     * @react-import ```jsx
     * import { SearchcraftResultsInfo } from "@searchcraft/react-sdk";
     * ```
     * @vue-import ```jsx
     * import { SearchcraftResultsInfo } from "@searchcraft/vue-sdk";
     * ```
     * @js-example ```html
     * <!-- index.html -->
     * <searchcraft-results-info />
     * ```
     * ```js
     * // index.js
     * const resultsInfo = document.querySelector('searchcraft-results-info');
     * resultsInfo.template = (info, { html }) => html`
     *   ${info.range[0]}-${info.range[1]} of ${info.count} results in ${info.responseTime}ms
     * `;
     * ```
     * @react-example ```jsx
     * <SearchcraftResultsInfo
     *   template={(info, { html }) => html`
     *     ${info.range[0]}-${info.range[1]} of ${info.count} results in ${info.responseTime}ms
     *   `}
     * />
     * @vue-example ```jsx
     * <SearchcraftResultsInfo
     *   :template={(info, { html }) => html`
     *     ${info.range[0]}-${info.range[1]} of ${info.count} results in ${info.responseTime}ms
     *   `}
     * />
     * ```
     */
    interface SearchcraftResultsInfo {
        /**
          * A callback function responsible for rendering the results info.
          * @example ```ts  resultsInfo.template = html`    ${range[0]}-${range[1]} of ${count} results in ${responseTime}ms  `; ```
         */
        "template"?: ResultsInfoTemplate;
    }
    /**
     * This web component is designed to display detailed information for a single search result. Once a query is submitted, the component formats and presents the result.
     */
    interface SearchcraftSearchResult {
        /**
          * The position in the document. Used with the "document_clicked" measure event.
         */
        "documentPosition": number;
        /**
          * The index.
         */
        "index": number;
        "item"?: SearchClientResponseItem;
        /**
          * A callback function responsible for rendering a result.
         */
        "template"?: SearchResultTemplate<SearchResultTemplateData>;
    }
    /**
     * This web component is responsible for displaying the results of a search query. Once a query is submitted, the component formats and presents an ordered list of the results.
     * @react-import ```jsx
     * import { SearchcraftSearchResults } from "@searchcraft/react-sdk";
     * ```
     * @vue-import ```jsx
     * import { SearchcraftSearchResults } from "@searchcraft/vue-sdk";
     * ```
     * @js-example ```html
     * <!-- index.html -->
     * <searchcraft-search-results
     *   ad-interval="4"
     *   place-ad-at-start="true"
     * />
     * ```
     * ```js
     * // index.js
     * const searchResults = document.querySelector('searchcraft-search-results');
     * searchResults.template = (item, index, { html }) => html`
     *  <h2>${item.title}</h2>
     * `;
     * ```
     * @react-example ```jsx
     * <SearchcraftSearchResults
     *   adInterval={4}
     *   placeAdAtState={true}
     *   template={(item, index, { html }) => html`
     *     <h2>${item.title}</h2>
     *   `}
     * />
     * ```
     * @vue-example ```jsx
     * <SearchcraftSearchResults
     *   adInterval={4}
     *   placeAdAtState={true}
     *   :template={(item, index, { html }) => html`
     *     <h2>${item.title}</h2>
     *   `}
     * />
     * ```
     */
    interface SearchcraftSearchResults {
        /**
          * A callback function responsible for rendering a result. Passed to `searchcraft-search-result`.
         */
        "template"?: SearchResultTemplate<SearchResultTemplateData>;
    }
    /**
     * This web component is designed to choose the number of search results displayed.
     * @react-import ```jsx
     * import { SearchcraftSearchResultsPerPage } from "@searchcraft/react-sdk";
     * ```
     * @vue-import ```jsx
     * import { SearchcraftSearchResultsPerPage } from "@searchcraft/vue-sdk";
     * ```
     * @js-example ```html
     * <!-- index.html -->
     * <searchcraft-search-results-per-page increment="20" />
     * ```
     * @react-example ```jsx
     * <SearchcraftSearchResultsPerPage increment={20} />
     * ```
     * @vue-example ```jsx
     * <SearchcraftSearchResultsPerPage increment="20" />
     * ```
     */
    interface SearchcraftSearchResultsPerPage {
        /**
          * The amount the options will increase (e.g. 20 = [20, 40, 60, 80, 100]). The base value is defined by the `searchResultsPerPage` option in the configuration.
         */
        "increment": string | number;
    }
    /**
     * This web component is designed to allow users to select between a group of options.
     * @js-example ```html
     * <!-- index.html -->
     * <searchcraft-select
     *  inputId="searchcraft-select"
     *  name="searchcraft-select"
     *  options="[{ label: 'label', value: 'value' }]"
     * />
     * ```
     */
    interface SearchcraftSelect {
        /**
          * The caption displayed below the select input.
         */
        "caption"?: string;
        /**
          * Whether the select input is disabled.
         */
        "disabled"?: boolean;
        /**
          * The ID for the select input.
         */
        "inputId": string;
        /**
          * The label of the select input.
         */
        "label"?: string;
        /**
          * The ID for the label of the select input.
         */
        "labelId"?: string;
        /**
          * The name of the select input.
         */
        "name": string;
        /**
          * The options for the select input.
         */
        "options": SearchcraftSelectOption[] | string;
    }
    /**
     * This web component is designed to allow users to select a value from a range defined by a minimum and maximum value. The component renders a slider interface, which can be used to visually choose a value between two boundaries.
     */
    interface SearchcraftSlider {
        /**
          * The type of data allowed.
         */
        "dataType": 'number' | 'date';
        /**
          * The granularity that the value must adhere to.
         */
        "granularity": number;
        /**
          * The maximum value allowed.
         */
        "max": number;
        /**
          * The minimum value allowed.
         */
        "min": number;
    }
    /**
     * This web component adds Searchcraft's built-in css theme to your page. It does not render anything visible, its only function is to manage the css styles on the page.'
     * @react-import ```jsx
     * import { SearchcraftTheme } from "@searchcraft/react-sdk";
     * ```
     * @vue-import ```jsx
     * import { SearchcraftTheme } from "@searchcraft/vue-sdk";
     * ```
     * @js-example ```html
     * <searchcraft-theme />
     * ```
     * @react-example ```jsx
     * <SearchcraftTheme />
     * ```
     * @vue-example ```jsx
     * <SearchcraftTheme />
     * ```
     */
    interface SearchcraftTheme {
    }
    /**
     * This web component simulates a light switch functionality, providing a simple and intuitive toggle between two states—on and off.
     */
    interface SearchcraftToggleButton {
        /**
          * The label.
         */
        "label": string;
        /**
          * The secondary label displayed below the main label.
         */
        "subLabel": string | undefined;
    }
}
export interface SearchcraftButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSearchcraftButtonElement;
}
export interface SearchcraftFacetListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSearchcraftFacetListElement;
}
export interface SearchcraftInputFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSearchcraftInputFormElement;
}
export interface SearchcraftSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSearchcraftSelectElement;
}
export interface SearchcraftSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSearchcraftSliderElement;
}
export interface SearchcraftToggleButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSearchcraftToggleButtonElement;
}
declare global {
    /**
     * An inline ad meant to be rendered in a list of search results.
     */
    interface HTMLSearchcraftAdElement extends Components.SearchcraftAd, HTMLStencilElement {
    }
    var HTMLSearchcraftAdElement: {
        prototype: HTMLSearchcraftAdElement;
        new (): HTMLSearchcraftAdElement;
    };
    interface HTMLSearchcraftButtonElementEventMap {
        "buttonClick": void;
    }
    /**
     * This web component represents a button.
     * It provides a clear, interactive way for users to submit search queries or trigger actions in a search interface.
     */
    interface HTMLSearchcraftButtonElement extends Components.SearchcraftButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSearchcraftButtonElementEventMap>(type: K, listener: (this: HTMLSearchcraftButtonElement, ev: SearchcraftButtonCustomEvent<HTMLSearchcraftButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSearchcraftButtonElementEventMap>(type: K, listener: (this: HTMLSearchcraftButtonElement, ev: SearchcraftButtonCustomEvent<HTMLSearchcraftButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSearchcraftButtonElement: {
        prototype: HTMLSearchcraftButtonElement;
        new (): HTMLSearchcraftButtonElement;
    };
    /**
     * This web component is designed to display a user-friendly error message when a search query fails, providing clear feedback to users and enhancing their experience when an issue arises during the search process.
     * @js-example ```html
     * <searchcraft-error-message>
     *   No search results found for query
     * </searchcraft-error-message>
     * ```
     */
    interface HTMLSearchcraftErrorMessageElement extends Components.SearchcraftErrorMessage, HTMLStencilElement {
    }
    var HTMLSearchcraftErrorMessageElement: {
        prototype: HTMLSearchcraftErrorMessageElement;
        new (): HTMLSearchcraftErrorMessageElement;
    };
    interface HTMLSearchcraftFacetListElementEventMap {
        "facetSelectionUpdated": { paths: string[] };
    }
    /**
     * This web component is designed to display facets in a search interface, allowing users to refine their search results by applying filters based on various attributes.
     * It is consumed within the `searchcraft-filter-panel`.
     * @js-example ```html
     * <!-- index.html -->
     * <searchcraft-facet-list field-name="title" />
     * ```
     * ```js
     * // index.js
     * const facetList = document.querySelector('searchcraft-facet-list');
     * facetList.addEventListener('facetSelectionUpdated', () => {
     *   console.log('Facet selection updated');
     * });
     * ```
     */
    interface HTMLSearchcraftFacetListElement extends Components.SearchcraftFacetList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSearchcraftFacetListElementEventMap>(type: K, listener: (this: HTMLSearchcraftFacetListElement, ev: SearchcraftFacetListCustomEvent<HTMLSearchcraftFacetListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSearchcraftFacetListElementEventMap>(type: K, listener: (this: HTMLSearchcraftFacetListElement, ev: SearchcraftFacetListCustomEvent<HTMLSearchcraftFacetListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSearchcraftFacetListElement: {
        prototype: HTMLSearchcraftFacetListElement;
        new (): HTMLSearchcraftFacetListElement;
    };
    /**
     * This web component represents a series of filters that allows users to refine and control their search queries by applying various filter criteria.
     * @react-import ```jsx
     * import { SearchcraftFilterPanel } from "@searchcraft/react-sdk";
     * ```
     * @vue-import ```jsx
     * import { SearchcraftFilterPanel } from "@searchcraft/vue-sdk";
     * ```
     * @js-example ```html
     * <!-- index.html -->
     * <searchcraft-filter-panel />
     * ```
     * ```js
     * // index.js
     * const filterPanel = document.querySelector('searchcraft-filter-panel');
     * if (filterPanel) {
     *   filterPanel.items = [];
     * }
     * ```
     * @react-example ```jsx
     * <SearchcraftFilterPanel items={[]} />
     * ```
     * @vue-example ```jsx
     * <SearchcraftFilterPanel :items="[]" />
     * ```
     */
    interface HTMLSearchcraftFilterPanelElement extends Components.SearchcraftFilterPanel, HTMLStencilElement {
    }
    var HTMLSearchcraftFilterPanelElement: {
        prototype: HTMLSearchcraftFilterPanelElement;
        new (): HTMLSearchcraftFilterPanelElement;
    };
    interface HTMLSearchcraftInputFormElementEventMap {
        "inputFocus": void;
        "inputBlur": void;
        "inputInit": void;
    }
    /**
     * This web component provides a user-friendly interface for querying an indexed dataset, enabling users to easily search large collections of data.
     * It abstracts the complexities of index-based searching, making it accessible to users of all technical levels.
     * @react-import ```jsx
     * import { SearchcraftInputForm } from "@searchcraft/react-sdk";
     * ```
     * @vue-import ```jsx
     * import { SearchcraftInputForm } from "@searchcraft/vue-sdk";
     * ```
     * @js-example ```html
     * <searchcraft-input-form auto-search />
     * ```
     * @react-example ```jsx
     * <SearchcraftInputForm autoSearch />
     * ```
     * @vue-example ```jsx
     * <SearchcraftInputForm autoSearch />
     * ```
     */
    interface HTMLSearchcraftInputFormElement extends Components.SearchcraftInputForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSearchcraftInputFormElementEventMap>(type: K, listener: (this: HTMLSearchcraftInputFormElement, ev: SearchcraftInputFormCustomEvent<HTMLSearchcraftInputFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSearchcraftInputFormElementEventMap>(type: K, listener: (this: HTMLSearchcraftInputFormElement, ev: SearchcraftInputFormCustomEvent<HTMLSearchcraftInputFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSearchcraftInputFormElement: {
        prototype: HTMLSearchcraftInputFormElement;
        new (): HTMLSearchcraftInputFormElement;
    };
    /**
     * This web component serves as the input label for the searchcraft-input-form component.
     * @js-example ```html
     * <searchcraft-input-label label="Search" />
     * ```
     */
    interface HTMLSearchcraftInputLabelElement extends Components.SearchcraftInputLabel, HTMLStencilElement {
    }
    var HTMLSearchcraftInputLabelElement: {
        prototype: HTMLSearchcraftInputLabelElement;
        new (): HTMLSearchcraftInputLabelElement;
    };
    /**
     * This web component is designed to facilitate pagination of search results. Once a query is submitted, calculates the number for pages.
     * @react-import ```jsx
     * import { SearchcraftPagination } from "@searchcraft/react-sdk";
     * ```
     * @vue-import ```jsx
     * import { SearchcraftPagination } from "@searchcraft/vue-sdk";
     * ```
     * @js-example ```html
     * <searchcraft-pagination />
     * ```
     * @react-example ```jsx
     * <SearchcraftPagination />
     * ```
     * @vue-example ```jsx
     * <SearchcraftPagination />
     * ```
     */
    interface HTMLSearchcraftPaginationElement extends Components.SearchcraftPagination, HTMLStencilElement {
    }
    var HTMLSearchcraftPaginationElement: {
        prototype: HTMLSearchcraftPaginationElement;
        new (): HTMLSearchcraftPaginationElement;
    };
    /**
     * Renders a button which, when clicked, turns on popover visibility.
     * @react-import ```jsx
     * import { SearchcraftPopoverButton } from "@searchcraft/react-sdk";
     * ````
     * @vue-import ```jsx
     * import { SearchcraftPopoverButton } from "@searchcraft/vue-sdk";
     * ```
     * @js-example ```html
     * <searchcraft-popover-button>
     *   Open popover
     * </searchcraft-popover-button>
     * ```
     * @react-example ```jsx
     * <SearchcraftPopoverButton>
     *   Open popover
     * </SearchcraftPopoverButton>
     * ```
     * @vue-example ```jsx
     * <SearchcraftPopoverButton>
     *   Open popover
     * </SearchcraftPopoverButton>
     * ```
     */
    interface HTMLSearchcraftPopoverButtonElement extends Components.SearchcraftPopoverButton, HTMLStencilElement {
    }
    var HTMLSearchcraftPopoverButtonElement: {
        prototype: HTMLSearchcraftPopoverButtonElement;
        new (): HTMLSearchcraftPopoverButtonElement;
    };
    /**
     * Renders the footer for the searchcraft-popover-form.
     */
    interface HTMLSearchcraftPopoverFooterElement extends Components.SearchcraftPopoverFooter, HTMLStencilElement {
    }
    var HTMLSearchcraftPopoverFooterElement: {
        prototype: HTMLSearchcraftPopoverFooterElement;
        new (): HTMLSearchcraftPopoverFooterElement;
    };
    /**
     * This web component is designed to display search results in a popover container that dynamically appears when the user interacts with a search input field, or when a popover-button is pressed.
     * @react-import ```jsx
     * import { SearchcraftPopoverForm } from "@searchcraft/react-sdk";
     * ```
     * @vue-import ```jsx
     * import { SearchcraftPopoverForm } from "@searchcraft/vue-sdk";
     * ```
     * @js-example ```html
     * <!-- index.html -->
     * <searchcraft-popover-form type="inline" />
     * ```
     * ```js
     * // index.js
     * const popoverForm = document.querySelector('searchcraft-popover-form');
     * popoverForm.popoverResultMappings = {};
     * ```
     * @react-example ```jsx
     * <SearchcraftPopoverForm type="inline" popoverResultMappings={[]} />
     * ```
     * @vue-example ```jsx
     * <SearchcraftPopoverForm type="inline" :popoverResultMappings="[]"" />
     * ```
     */
    interface HTMLSearchcraftPopoverFormElement extends Components.SearchcraftPopoverForm, HTMLStencilElement {
    }
    var HTMLSearchcraftPopoverFormElement: {
        prototype: HTMLSearchcraftPopoverFormElement;
        new (): HTMLSearchcraftPopoverFormElement;
    };
    /**
     * A single list item rendered in a searchcraft-popover-list-view.
     */
    interface HTMLSearchcraftPopoverListItemElement extends Components.SearchcraftPopoverListItem, HTMLStencilElement {
    }
    var HTMLSearchcraftPopoverListItemElement: {
        prototype: HTMLSearchcraftPopoverListItemElement;
        new (): HTMLSearchcraftPopoverListItemElement;
    };
    /**
     * This web component is designed to display a list of results within a popover interface.
     * It is consumed within the `searchcraft-popover-form` component.
     * @js-example ```html
     * <searchcraft-popover-list-view />
     * ```
     */
    interface HTMLSearchcraftPopoverListViewElement extends Components.SearchcraftPopoverListView, HTMLStencilElement {
    }
    var HTMLSearchcraftPopoverListViewElement: {
        prototype: HTMLSearchcraftPopoverListViewElement;
        new (): HTMLSearchcraftPopoverListViewElement;
    };
    /**
     * This web component is designed to display the number of results returned from a search query.
     * @react-import ```jsx
     * import { SearchcraftResultsInfo } from "@searchcraft/react-sdk";
     * ```
     * @vue-import ```jsx
     * import { SearchcraftResultsInfo } from "@searchcraft/vue-sdk";
     * ```
     * @js-example ```html
     * <!-- index.html -->
     * <searchcraft-results-info />
     * ```
     * ```js
     * // index.js
     * const resultsInfo = document.querySelector('searchcraft-results-info');
     * resultsInfo.template = (info, { html }) => html`
     *   ${info.range[0]}-${info.range[1]} of ${info.count} results in ${info.responseTime}ms
     * `;
     * ```
     * @react-example ```jsx
     * <SearchcraftResultsInfo
     *   template={(info, { html }) => html`
     *     ${info.range[0]}-${info.range[1]} of ${info.count} results in ${info.responseTime}ms
     *   `}
     * />
     * @vue-example ```jsx
     * <SearchcraftResultsInfo
     *   :template={(info, { html }) => html`
     *     ${info.range[0]}-${info.range[1]} of ${info.count} results in ${info.responseTime}ms
     *   `}
     * />
     * ```
     */
    interface HTMLSearchcraftResultsInfoElement extends Components.SearchcraftResultsInfo, HTMLStencilElement {
    }
    var HTMLSearchcraftResultsInfoElement: {
        prototype: HTMLSearchcraftResultsInfoElement;
        new (): HTMLSearchcraftResultsInfoElement;
    };
    /**
     * This web component is designed to display detailed information for a single search result. Once a query is submitted, the component formats and presents the result.
     */
    interface HTMLSearchcraftSearchResultElement extends Components.SearchcraftSearchResult, HTMLStencilElement {
    }
    var HTMLSearchcraftSearchResultElement: {
        prototype: HTMLSearchcraftSearchResultElement;
        new (): HTMLSearchcraftSearchResultElement;
    };
    /**
     * This web component is responsible for displaying the results of a search query. Once a query is submitted, the component formats and presents an ordered list of the results.
     * @react-import ```jsx
     * import { SearchcraftSearchResults } from "@searchcraft/react-sdk";
     * ```
     * @vue-import ```jsx
     * import { SearchcraftSearchResults } from "@searchcraft/vue-sdk";
     * ```
     * @js-example ```html
     * <!-- index.html -->
     * <searchcraft-search-results
     *   ad-interval="4"
     *   place-ad-at-start="true"
     * />
     * ```
     * ```js
     * // index.js
     * const searchResults = document.querySelector('searchcraft-search-results');
     * searchResults.template = (item, index, { html }) => html`
     *  <h2>${item.title}</h2>
     * `;
     * ```
     * @react-example ```jsx
     * <SearchcraftSearchResults
     *   adInterval={4}
     *   placeAdAtState={true}
     *   template={(item, index, { html }) => html`
     *     <h2>${item.title}</h2>
     *   `}
     * />
     * ```
     * @vue-example ```jsx
     * <SearchcraftSearchResults
     *   adInterval={4}
     *   placeAdAtState={true}
     *   :template={(item, index, { html }) => html`
     *     <h2>${item.title}</h2>
     *   `}
     * />
     * ```
     */
    interface HTMLSearchcraftSearchResultsElement extends Components.SearchcraftSearchResults, HTMLStencilElement {
    }
    var HTMLSearchcraftSearchResultsElement: {
        prototype: HTMLSearchcraftSearchResultsElement;
        new (): HTMLSearchcraftSearchResultsElement;
    };
    /**
     * This web component is designed to choose the number of search results displayed.
     * @react-import ```jsx
     * import { SearchcraftSearchResultsPerPage } from "@searchcraft/react-sdk";
     * ```
     * @vue-import ```jsx
     * import { SearchcraftSearchResultsPerPage } from "@searchcraft/vue-sdk";
     * ```
     * @js-example ```html
     * <!-- index.html -->
     * <searchcraft-search-results-per-page increment="20" />
     * ```
     * @react-example ```jsx
     * <SearchcraftSearchResultsPerPage increment={20} />
     * ```
     * @vue-example ```jsx
     * <SearchcraftSearchResultsPerPage increment="20" />
     * ```
     */
    interface HTMLSearchcraftSearchResultsPerPageElement extends Components.SearchcraftSearchResultsPerPage, HTMLStencilElement {
    }
    var HTMLSearchcraftSearchResultsPerPageElement: {
        prototype: HTMLSearchcraftSearchResultsPerPageElement;
        new (): HTMLSearchcraftSearchResultsPerPageElement;
    };
    interface HTMLSearchcraftSelectElementEventMap {
        "selectChange": string;
    }
    /**
     * This web component is designed to allow users to select between a group of options.
     * @js-example ```html
     * <!-- index.html -->
     * <searchcraft-select
     *  inputId="searchcraft-select"
     *  name="searchcraft-select"
     *  options="[{ label: 'label', value: 'value' }]"
     * />
     * ```
     */
    interface HTMLSearchcraftSelectElement extends Components.SearchcraftSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSearchcraftSelectElementEventMap>(type: K, listener: (this: HTMLSearchcraftSelectElement, ev: SearchcraftSelectCustomEvent<HTMLSearchcraftSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSearchcraftSelectElementEventMap>(type: K, listener: (this: HTMLSearchcraftSelectElement, ev: SearchcraftSelectCustomEvent<HTMLSearchcraftSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSearchcraftSelectElement: {
        prototype: HTMLSearchcraftSelectElement;
        new (): HTMLSearchcraftSelectElement;
    };
    interface HTMLSearchcraftSliderElementEventMap {
        "rangeChanged": any;
    }
    /**
     * This web component is designed to allow users to select a value from a range defined by a minimum and maximum value. The component renders a slider interface, which can be used to visually choose a value between two boundaries.
     */
    interface HTMLSearchcraftSliderElement extends Components.SearchcraftSlider, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSearchcraftSliderElementEventMap>(type: K, listener: (this: HTMLSearchcraftSliderElement, ev: SearchcraftSliderCustomEvent<HTMLSearchcraftSliderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSearchcraftSliderElementEventMap>(type: K, listener: (this: HTMLSearchcraftSliderElement, ev: SearchcraftSliderCustomEvent<HTMLSearchcraftSliderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSearchcraftSliderElement: {
        prototype: HTMLSearchcraftSliderElement;
        new (): HTMLSearchcraftSliderElement;
    };
    /**
     * This web component adds Searchcraft's built-in css theme to your page. It does not render anything visible, its only function is to manage the css styles on the page.'
     * @react-import ```jsx
     * import { SearchcraftTheme } from "@searchcraft/react-sdk";
     * ```
     * @vue-import ```jsx
     * import { SearchcraftTheme } from "@searchcraft/vue-sdk";
     * ```
     * @js-example ```html
     * <searchcraft-theme />
     * ```
     * @react-example ```jsx
     * <SearchcraftTheme />
     * ```
     * @vue-example ```jsx
     * <SearchcraftTheme />
     * ```
     */
    interface HTMLSearchcraftThemeElement extends Components.SearchcraftTheme, HTMLStencilElement {
    }
    var HTMLSearchcraftThemeElement: {
        prototype: HTMLSearchcraftThemeElement;
        new (): HTMLSearchcraftThemeElement;
    };
    interface HTMLSearchcraftToggleButtonElementEventMap {
        "toggleUpdated": boolean;
    }
    /**
     * This web component simulates a light switch functionality, providing a simple and intuitive toggle between two states—on and off.
     */
    interface HTMLSearchcraftToggleButtonElement extends Components.SearchcraftToggleButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSearchcraftToggleButtonElementEventMap>(type: K, listener: (this: HTMLSearchcraftToggleButtonElement, ev: SearchcraftToggleButtonCustomEvent<HTMLSearchcraftToggleButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSearchcraftToggleButtonElementEventMap>(type: K, listener: (this: HTMLSearchcraftToggleButtonElement, ev: SearchcraftToggleButtonCustomEvent<HTMLSearchcraftToggleButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSearchcraftToggleButtonElement: {
        prototype: HTMLSearchcraftToggleButtonElement;
        new (): HTMLSearchcraftToggleButtonElement;
    };
    interface HTMLElementTagNameMap {
        "searchcraft-ad": HTMLSearchcraftAdElement;
        "searchcraft-button": HTMLSearchcraftButtonElement;
        "searchcraft-error-message": HTMLSearchcraftErrorMessageElement;
        "searchcraft-facet-list": HTMLSearchcraftFacetListElement;
        "searchcraft-filter-panel": HTMLSearchcraftFilterPanelElement;
        "searchcraft-input-form": HTMLSearchcraftInputFormElement;
        "searchcraft-input-label": HTMLSearchcraftInputLabelElement;
        "searchcraft-pagination": HTMLSearchcraftPaginationElement;
        "searchcraft-popover-button": HTMLSearchcraftPopoverButtonElement;
        "searchcraft-popover-footer": HTMLSearchcraftPopoverFooterElement;
        "searchcraft-popover-form": HTMLSearchcraftPopoverFormElement;
        "searchcraft-popover-list-item": HTMLSearchcraftPopoverListItemElement;
        "searchcraft-popover-list-view": HTMLSearchcraftPopoverListViewElement;
        "searchcraft-results-info": HTMLSearchcraftResultsInfoElement;
        "searchcraft-search-result": HTMLSearchcraftSearchResultElement;
        "searchcraft-search-results": HTMLSearchcraftSearchResultsElement;
        "searchcraft-search-results-per-page": HTMLSearchcraftSearchResultsPerPageElement;
        "searchcraft-select": HTMLSearchcraftSelectElement;
        "searchcraft-slider": HTMLSearchcraftSliderElement;
        "searchcraft-theme": HTMLSearchcraftThemeElement;
        "searchcraft-toggle-button": HTMLSearchcraftToggleButtonElement;
    }
}
declare namespace LocalJSX {
    /**
     * An inline ad meant to be rendered in a list of search results.
     */
    interface SearchcraftAd {
        "adClientResponseItem"?: AdClientResponseItem;
        "adContainerId"?: string;
        "adSource"?: SearchcraftAdSource;
    }
    /**
     * This web component represents a button.
     * It provides a clear, interactive way for users to submit search queries or trigger actions in a search interface.
     */
    interface SearchcraftButton {
        /**
          * Whether the button is disabled.
         */
        "disabled"?: boolean;
        /**
          * Controls the visual representation of the button.
         */
        "hierarchy"?: 'primary' | 'tertiary';
        /**
          * The icon element.
         */
        "icon"?: Element;
        /**
          * Should the button only display an icon.
         */
        "iconOnly"?: boolean;
        /**
          * The position of the icon.
         */
        "iconPosition"?: 'left' | 'right';
        /**
          * The label for the button.
         */
        "label"?: string;
        /**
          * The event fired when the button is clicked.
         */
        "onButtonClick"?: (event: SearchcraftButtonCustomEvent<void>) => void;
        /**
          * The type of the button.
         */
        "type"?: 'submit' | 'reset' | 'button';
    }
    /**
     * This web component is designed to display a user-friendly error message when a search query fails, providing clear feedback to users and enhancing their experience when an issue arises during the search process.
     * @js-example ```html
     * <searchcraft-error-message>
     *   No search results found for query
     * </searchcraft-error-message>
     * ```
     */
    interface SearchcraftErrorMessage {
    }
    /**
     * This web component is designed to display facets in a search interface, allowing users to refine their search results by applying filters based on various attributes.
     * It is consumed within the `searchcraft-filter-panel`.
     * @js-example ```html
     * <!-- index.html -->
     * <searchcraft-facet-list field-name="title" />
     * ```
     * ```js
     * // index.js
     * const facetList = document.querySelector('searchcraft-facet-list');
     * facetList.addEventListener('facetSelectionUpdated', () => {
     *   console.log('Facet selection updated');
     * });
     * ```
     */
    interface SearchcraftFacetList {
        /**
          * The name of the field where facets are applied.
         */
        "fieldName"?: string;
        /**
          * When the facets are updated.
         */
        "onFacetSelectionUpdated"?: (event: SearchcraftFacetListCustomEvent<{ paths: string[] }>) => void;
    }
    /**
     * This web component represents a series of filters that allows users to refine and control their search queries by applying various filter criteria.
     * @react-import ```jsx
     * import { SearchcraftFilterPanel } from "@searchcraft/react-sdk";
     * ```
     * @vue-import ```jsx
     * import { SearchcraftFilterPanel } from "@searchcraft/vue-sdk";
     * ```
     * @js-example ```html
     * <!-- index.html -->
     * <searchcraft-filter-panel />
     * ```
     * ```js
     * // index.js
     * const filterPanel = document.querySelector('searchcraft-filter-panel');
     * if (filterPanel) {
     *   filterPanel.items = [];
     * }
     * ```
     * @react-example ```jsx
     * <SearchcraftFilterPanel items={[]} />
     * ```
     * @vue-example ```jsx
     * <SearchcraftFilterPanel :items="[]" />
     * ```
     */
    interface SearchcraftFilterPanel {
        /**
          * The items to filter.
         */
        "items"?: FilterItem[];
    }
    /**
     * This web component provides a user-friendly interface for querying an indexed dataset, enabling users to easily search large collections of data.
     * It abstracts the complexities of index-based searching, making it accessible to users of all technical levels.
     * @react-import ```jsx
     * import { SearchcraftInputForm } from "@searchcraft/react-sdk";
     * ```
     * @vue-import ```jsx
     * import { SearchcraftInputForm } from "@searchcraft/vue-sdk";
     * ```
     * @js-example ```html
     * <searchcraft-input-form auto-search />
     * ```
     * @react-example ```jsx
     * <SearchcraftInputForm autoSearch />
     * ```
     * @vue-example ```jsx
     * <SearchcraftInputForm autoSearch />
     * ```
     */
    interface SearchcraftInputForm {
        /**
          * Whether or not to automatically submit the search term when the input changes.
         */
        "autoSearch"?: boolean;
        /**
          * The label for the submit button.
         */
        "buttonLabel"?: string;
        /**
          * Where to place the search button.
         */
        "buttonPlacement"?: 'left' | 'right' | 'none';
        "core"?: SearchcraftCore;
        /**
          * The label rendered above the input.
         */
        "inputLabel"?: string;
        /**
          * When the input becomes unfocused.
         */
        "onInputBlur"?: (event: SearchcraftInputFormCustomEvent<void>) => void;
        /**
          * When the input becomes focused.
         */
        "onInputFocus"?: (event: SearchcraftInputFormCustomEvent<void>) => void;
        /**
          * Event emitted when input initializes.
         */
        "onInputInit"?: (event: SearchcraftInputFormCustomEvent<void>) => void;
        /**
          * The input element's placeholder value.
         */
        "placeholderValue"?: string;
    }
    /**
     * This web component serves as the input label for the searchcraft-input-form component.
     * @js-example ```html
     * <searchcraft-input-label label="Search" />
     * ```
     */
    interface SearchcraftInputLabel {
        /**
          * The classname applied to the label element.
         */
        "inputLabelClassName"?: string | undefined;
        "label"?: string;
    }
    /**
     * This web component is designed to facilitate pagination of search results. Once a query is submitted, calculates the number for pages.
     * @react-import ```jsx
     * import { SearchcraftPagination } from "@searchcraft/react-sdk";
     * ```
     * @vue-import ```jsx
     * import { SearchcraftPagination } from "@searchcraft/vue-sdk";
     * ```
     * @js-example ```html
     * <searchcraft-pagination />
     * ```
     * @react-example ```jsx
     * <SearchcraftPagination />
     * ```
     * @vue-example ```jsx
     * <SearchcraftPagination />
     * ```
     */
    interface SearchcraftPagination {
    }
    /**
     * Renders a button which, when clicked, turns on popover visibility.
     * @react-import ```jsx
     * import { SearchcraftPopoverButton } from "@searchcraft/react-sdk";
     * ````
     * @vue-import ```jsx
     * import { SearchcraftPopoverButton } from "@searchcraft/vue-sdk";
     * ```
     * @js-example ```html
     * <searchcraft-popover-button>
     *   Open popover
     * </searchcraft-popover-button>
     * ```
     * @react-example ```jsx
     * <SearchcraftPopoverButton>
     *   Open popover
     * </SearchcraftPopoverButton>
     * ```
     * @vue-example ```jsx
     * <SearchcraftPopoverButton>
     *   Open popover
     * </SearchcraftPopoverButton>
     * ```
     */
    interface SearchcraftPopoverButton {
        /**
          * The type of popover button to render.
         */
        "type"?: 'skeuomorphic';
    }
    /**
     * Renders the footer for the searchcraft-popover-form.
     */
    interface SearchcraftPopoverFooter {
    }
    /**
     * This web component is designed to display search results in a popover container that dynamically appears when the user interacts with a search input field, or when a popover-button is pressed.
     * @react-import ```jsx
     * import { SearchcraftPopoverForm } from "@searchcraft/react-sdk";
     * ```
     * @vue-import ```jsx
     * import { SearchcraftPopoverForm } from "@searchcraft/vue-sdk";
     * ```
     * @js-example ```html
     * <!-- index.html -->
     * <searchcraft-popover-form type="inline" />
     * ```
     * ```js
     * // index.js
     * const popoverForm = document.querySelector('searchcraft-popover-form');
     * popoverForm.popoverResultMappings = {};
     * ```
     * @react-example ```jsx
     * <SearchcraftPopoverForm type="inline" popoverResultMappings={[]} />
     * ```
     * @vue-example ```jsx
     * <SearchcraftPopoverForm type="inline" :popoverResultMappings="[]"" />
     * ```
     */
    interface SearchcraftPopoverForm {
        /**
          * The hotkey that activates the popover.
         */
        "hotkey"?: string;
        /**
          * The hotkey modifier that activates the popover. Used together with the `hotkey` prop.
         */
        "hotkeyModifier"?: 'ctrl' | 'meta' | 'alt' | 'option';
        /**
          * Formats the content rendered for each result.
         */
        "popoverResultMappings"?: PopoverResultMappings;
        /**
          * The type of popover form to render. - `inline` - Renders inline with the rest of the content on the page. The search results pop over the page content. - `fullscreen` - Renders in fullscreen view. Used together with the `searchcraft-popover-button` component. - `modal` - Renders in a modal view. Used together with the `searchcraft-popover-button` component.
         */
        "type"?: 'inline' | 'fullscreen' | 'modal';
    }
    /**
     * A single list item rendered in a searchcraft-popover-list-view.
     */
    interface SearchcraftPopoverListItem {
        /**
          * The document position relative to the search results (For Measure)
         */
        "documentPosition"?: number;
        "item"?: SearchClientResponseItem | undefined;
        "popoverResultMappings"?: PopoverResultMappings | undefined;
    }
    /**
     * This web component is designed to display a list of results within a popover interface.
     * It is consumed within the `searchcraft-popover-form` component.
     * @js-example ```html
     * <searchcraft-popover-list-view />
     * ```
     */
    interface SearchcraftPopoverListView {
        "adClientResponseItems"?: AdClientResponseItem[] | undefined;
        /**
          * The mappings that define how the data in the documents are mapped to the list-view-item elements.
         */
        "popoverResultMappings"?: PopoverResultMappings | undefined;
        /**
          * The items to render in the list view.
         */
        "searchClientResponseItems"?: SearchClientResponseItem[] | undefined;
        "searchResultsPage": number;
        "searchResultsPerPage": number;
    }
    /**
     * This web component is designed to display the number of results returned from a search query.
     * @react-import ```jsx
     * import { SearchcraftResultsInfo } from "@searchcraft/react-sdk";
     * ```
     * @vue-import ```jsx
     * import { SearchcraftResultsInfo } from "@searchcraft/vue-sdk";
     * ```
     * @js-example ```html
     * <!-- index.html -->
     * <searchcraft-results-info />
     * ```
     * ```js
     * // index.js
     * const resultsInfo = document.querySelector('searchcraft-results-info');
     * resultsInfo.template = (info, { html }) => html`
     *   ${info.range[0]}-${info.range[1]} of ${info.count} results in ${info.responseTime}ms
     * `;
     * ```
     * @react-example ```jsx
     * <SearchcraftResultsInfo
     *   template={(info, { html }) => html`
     *     ${info.range[0]}-${info.range[1]} of ${info.count} results in ${info.responseTime}ms
     *   `}
     * />
     * @vue-example ```jsx
     * <SearchcraftResultsInfo
     *   :template={(info, { html }) => html`
     *     ${info.range[0]}-${info.range[1]} of ${info.count} results in ${info.responseTime}ms
     *   `}
     * />
     * ```
     */
    interface SearchcraftResultsInfo {
        /**
          * A callback function responsible for rendering the results info.
          * @example ```ts  resultsInfo.template = html`    ${range[0]}-${range[1]} of ${count} results in ${responseTime}ms  `; ```
         */
        "template"?: ResultsInfoTemplate;
    }
    /**
     * This web component is designed to display detailed information for a single search result. Once a query is submitted, the component formats and presents the result.
     */
    interface SearchcraftSearchResult {
        /**
          * The position in the document. Used with the "document_clicked" measure event.
         */
        "documentPosition"?: number;
        /**
          * The index.
         */
        "index": number;
        "item"?: SearchClientResponseItem;
        /**
          * A callback function responsible for rendering a result.
         */
        "template"?: SearchResultTemplate<SearchResultTemplateData>;
    }
    /**
     * This web component is responsible for displaying the results of a search query. Once a query is submitted, the component formats and presents an ordered list of the results.
     * @react-import ```jsx
     * import { SearchcraftSearchResults } from "@searchcraft/react-sdk";
     * ```
     * @vue-import ```jsx
     * import { SearchcraftSearchResults } from "@searchcraft/vue-sdk";
     * ```
     * @js-example ```html
     * <!-- index.html -->
     * <searchcraft-search-results
     *   ad-interval="4"
     *   place-ad-at-start="true"
     * />
     * ```
     * ```js
     * // index.js
     * const searchResults = document.querySelector('searchcraft-search-results');
     * searchResults.template = (item, index, { html }) => html`
     *  <h2>${item.title}</h2>
     * `;
     * ```
     * @react-example ```jsx
     * <SearchcraftSearchResults
     *   adInterval={4}
     *   placeAdAtState={true}
     *   template={(item, index, { html }) => html`
     *     <h2>${item.title}</h2>
     *   `}
     * />
     * ```
     * @vue-example ```jsx
     * <SearchcraftSearchResults
     *   adInterval={4}
     *   placeAdAtState={true}
     *   :template={(item, index, { html }) => html`
     *     <h2>${item.title}</h2>
     *   `}
     * />
     * ```
     */
    interface SearchcraftSearchResults {
        /**
          * A callback function responsible for rendering a result. Passed to `searchcraft-search-result`.
         */
        "template"?: SearchResultTemplate<SearchResultTemplateData>;
    }
    /**
     * This web component is designed to choose the number of search results displayed.
     * @react-import ```jsx
     * import { SearchcraftSearchResultsPerPage } from "@searchcraft/react-sdk";
     * ```
     * @vue-import ```jsx
     * import { SearchcraftSearchResultsPerPage } from "@searchcraft/vue-sdk";
     * ```
     * @js-example ```html
     * <!-- index.html -->
     * <searchcraft-search-results-per-page increment="20" />
     * ```
     * @react-example ```jsx
     * <SearchcraftSearchResultsPerPage increment={20} />
     * ```
     * @vue-example ```jsx
     * <SearchcraftSearchResultsPerPage increment="20" />
     * ```
     */
    interface SearchcraftSearchResultsPerPage {
        /**
          * The amount the options will increase (e.g. 20 = [20, 40, 60, 80, 100]). The base value is defined by the `searchResultsPerPage` option in the configuration.
         */
        "increment"?: string | number;
    }
    /**
     * This web component is designed to allow users to select between a group of options.
     * @js-example ```html
     * <!-- index.html -->
     * <searchcraft-select
     *  inputId="searchcraft-select"
     *  name="searchcraft-select"
     *  options="[{ label: 'label', value: 'value' }]"
     * />
     * ```
     */
    interface SearchcraftSelect {
        /**
          * The caption displayed below the select input.
         */
        "caption"?: string;
        /**
          * Whether the select input is disabled.
         */
        "disabled"?: boolean;
        /**
          * The ID for the select input.
         */
        "inputId": string;
        /**
          * The label of the select input.
         */
        "label"?: string;
        /**
          * The ID for the label of the select input.
         */
        "labelId"?: string;
        /**
          * The name of the select input.
         */
        "name": string;
        /**
          * The event fired when the select is changed.
         */
        "onSelectChange"?: (event: SearchcraftSelectCustomEvent<string>) => void;
        /**
          * The options for the select input.
         */
        "options"?: SearchcraftSelectOption[] | string;
    }
    /**
     * This web component is designed to allow users to select a value from a range defined by a minimum and maximum value. The component renders a slider interface, which can be used to visually choose a value between two boundaries.
     */
    interface SearchcraftSlider {
        /**
          * The type of data allowed.
         */
        "dataType"?: 'number' | 'date';
        /**
          * The granularity that the value must adhere to.
         */
        "granularity"?: number;
        /**
          * The maximum value allowed.
         */
        "max"?: number;
        /**
          * The minimum value allowed.
         */
        "min"?: number;
        /**
          * When the range has changed.
         */
        "onRangeChanged"?: (event: SearchcraftSliderCustomEvent<any>) => void;
    }
    /**
     * This web component adds Searchcraft's built-in css theme to your page. It does not render anything visible, its only function is to manage the css styles on the page.'
     * @react-import ```jsx
     * import { SearchcraftTheme } from "@searchcraft/react-sdk";
     * ```
     * @vue-import ```jsx
     * import { SearchcraftTheme } from "@searchcraft/vue-sdk";
     * ```
     * @js-example ```html
     * <searchcraft-theme />
     * ```
     * @react-example ```jsx
     * <SearchcraftTheme />
     * ```
     * @vue-example ```jsx
     * <SearchcraftTheme />
     * ```
     */
    interface SearchcraftTheme {
    }
    /**
     * This web component simulates a light switch functionality, providing a simple and intuitive toggle between two states—on and off.
     */
    interface SearchcraftToggleButton {
        /**
          * The label.
         */
        "label"?: string;
        /**
          * When the toggle element is changed.
         */
        "onToggleUpdated"?: (event: SearchcraftToggleButtonCustomEvent<boolean>) => void;
        /**
          * The secondary label displayed below the main label.
         */
        "subLabel"?: string | undefined;
    }
    interface IntrinsicElements {
        "searchcraft-ad": SearchcraftAd;
        "searchcraft-button": SearchcraftButton;
        "searchcraft-error-message": SearchcraftErrorMessage;
        "searchcraft-facet-list": SearchcraftFacetList;
        "searchcraft-filter-panel": SearchcraftFilterPanel;
        "searchcraft-input-form": SearchcraftInputForm;
        "searchcraft-input-label": SearchcraftInputLabel;
        "searchcraft-pagination": SearchcraftPagination;
        "searchcraft-popover-button": SearchcraftPopoverButton;
        "searchcraft-popover-footer": SearchcraftPopoverFooter;
        "searchcraft-popover-form": SearchcraftPopoverForm;
        "searchcraft-popover-list-item": SearchcraftPopoverListItem;
        "searchcraft-popover-list-view": SearchcraftPopoverListView;
        "searchcraft-results-info": SearchcraftResultsInfo;
        "searchcraft-search-result": SearchcraftSearchResult;
        "searchcraft-search-results": SearchcraftSearchResults;
        "searchcraft-search-results-per-page": SearchcraftSearchResultsPerPage;
        "searchcraft-select": SearchcraftSelect;
        "searchcraft-slider": SearchcraftSlider;
        "searchcraft-theme": SearchcraftTheme;
        "searchcraft-toggle-button": SearchcraftToggleButton;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * An inline ad meant to be rendered in a list of search results.
             */
            "searchcraft-ad": LocalJSX.SearchcraftAd & JSXBase.HTMLAttributes<HTMLSearchcraftAdElement>;
            /**
             * This web component represents a button.
             * It provides a clear, interactive way for users to submit search queries or trigger actions in a search interface.
             */
            "searchcraft-button": LocalJSX.SearchcraftButton & JSXBase.HTMLAttributes<HTMLSearchcraftButtonElement>;
            /**
             * This web component is designed to display a user-friendly error message when a search query fails, providing clear feedback to users and enhancing their experience when an issue arises during the search process.
             * @js-example ```html
             * <searchcraft-error-message>
             *   No search results found for query
             * </searchcraft-error-message>
             * ```
             */
            "searchcraft-error-message": LocalJSX.SearchcraftErrorMessage & JSXBase.HTMLAttributes<HTMLSearchcraftErrorMessageElement>;
            /**
             * This web component is designed to display facets in a search interface, allowing users to refine their search results by applying filters based on various attributes.
             * It is consumed within the `searchcraft-filter-panel`.
             * @js-example ```html
             * <!-- index.html -->
             * <searchcraft-facet-list field-name="title" />
             * ```
             * ```js
             * // index.js
             * const facetList = document.querySelector('searchcraft-facet-list');
             * facetList.addEventListener('facetSelectionUpdated', () => {
             *   console.log('Facet selection updated');
             * });
             * ```
             */
            "searchcraft-facet-list": LocalJSX.SearchcraftFacetList & JSXBase.HTMLAttributes<HTMLSearchcraftFacetListElement>;
            /**
             * This web component represents a series of filters that allows users to refine and control their search queries by applying various filter criteria.
             * @react-import ```jsx
             * import { SearchcraftFilterPanel } from "@searchcraft/react-sdk";
             * ```
             * @vue-import ```jsx
             * import { SearchcraftFilterPanel } from "@searchcraft/vue-sdk";
             * ```
             * @js-example ```html
             * <!-- index.html -->
             * <searchcraft-filter-panel />
             * ```
             * ```js
             * // index.js
             * const filterPanel = document.querySelector('searchcraft-filter-panel');
             * if (filterPanel) {
             *   filterPanel.items = [];
             * }
             * ```
             * @react-example ```jsx
             * <SearchcraftFilterPanel items={[]} />
             * ```
             * @vue-example ```jsx
             * <SearchcraftFilterPanel :items="[]" />
             * ```
             */
            "searchcraft-filter-panel": LocalJSX.SearchcraftFilterPanel & JSXBase.HTMLAttributes<HTMLSearchcraftFilterPanelElement>;
            /**
             * This web component provides a user-friendly interface for querying an indexed dataset, enabling users to easily search large collections of data.
             * It abstracts the complexities of index-based searching, making it accessible to users of all technical levels.
             * @react-import ```jsx
             * import { SearchcraftInputForm } from "@searchcraft/react-sdk";
             * ```
             * @vue-import ```jsx
             * import { SearchcraftInputForm } from "@searchcraft/vue-sdk";
             * ```
             * @js-example ```html
             * <searchcraft-input-form auto-search />
             * ```
             * @react-example ```jsx
             * <SearchcraftInputForm autoSearch />
             * ```
             * @vue-example ```jsx
             * <SearchcraftInputForm autoSearch />
             * ```
             */
            "searchcraft-input-form": LocalJSX.SearchcraftInputForm & JSXBase.HTMLAttributes<HTMLSearchcraftInputFormElement>;
            /**
             * This web component serves as the input label for the searchcraft-input-form component.
             * @js-example ```html
             * <searchcraft-input-label label="Search" />
             * ```
             */
            "searchcraft-input-label": LocalJSX.SearchcraftInputLabel & JSXBase.HTMLAttributes<HTMLSearchcraftInputLabelElement>;
            /**
             * This web component is designed to facilitate pagination of search results. Once a query is submitted, calculates the number for pages.
             * @react-import ```jsx
             * import { SearchcraftPagination } from "@searchcraft/react-sdk";
             * ```
             * @vue-import ```jsx
             * import { SearchcraftPagination } from "@searchcraft/vue-sdk";
             * ```
             * @js-example ```html
             * <searchcraft-pagination />
             * ```
             * @react-example ```jsx
             * <SearchcraftPagination />
             * ```
             * @vue-example ```jsx
             * <SearchcraftPagination />
             * ```
             */
            "searchcraft-pagination": LocalJSX.SearchcraftPagination & JSXBase.HTMLAttributes<HTMLSearchcraftPaginationElement>;
            /**
             * Renders a button which, when clicked, turns on popover visibility.
             * @react-import ```jsx
             * import { SearchcraftPopoverButton } from "@searchcraft/react-sdk";
             * ````
             * @vue-import ```jsx
             * import { SearchcraftPopoverButton } from "@searchcraft/vue-sdk";
             * ```
             * @js-example ```html
             * <searchcraft-popover-button>
             *   Open popover
             * </searchcraft-popover-button>
             * ```
             * @react-example ```jsx
             * <SearchcraftPopoverButton>
             *   Open popover
             * </SearchcraftPopoverButton>
             * ```
             * @vue-example ```jsx
             * <SearchcraftPopoverButton>
             *   Open popover
             * </SearchcraftPopoverButton>
             * ```
             */
            "searchcraft-popover-button": LocalJSX.SearchcraftPopoverButton & JSXBase.HTMLAttributes<HTMLSearchcraftPopoverButtonElement>;
            /**
             * Renders the footer for the searchcraft-popover-form.
             */
            "searchcraft-popover-footer": LocalJSX.SearchcraftPopoverFooter & JSXBase.HTMLAttributes<HTMLSearchcraftPopoverFooterElement>;
            /**
             * This web component is designed to display search results in a popover container that dynamically appears when the user interacts with a search input field, or when a popover-button is pressed.
             * @react-import ```jsx
             * import { SearchcraftPopoverForm } from "@searchcraft/react-sdk";
             * ```
             * @vue-import ```jsx
             * import { SearchcraftPopoverForm } from "@searchcraft/vue-sdk";
             * ```
             * @js-example ```html
             * <!-- index.html -->
             * <searchcraft-popover-form type="inline" />
             * ```
             * ```js
             * // index.js
             * const popoverForm = document.querySelector('searchcraft-popover-form');
             * popoverForm.popoverResultMappings = {};
             * ```
             * @react-example ```jsx
             * <SearchcraftPopoverForm type="inline" popoverResultMappings={[]} />
             * ```
             * @vue-example ```jsx
             * <SearchcraftPopoverForm type="inline" :popoverResultMappings="[]"" />
             * ```
             */
            "searchcraft-popover-form": LocalJSX.SearchcraftPopoverForm & JSXBase.HTMLAttributes<HTMLSearchcraftPopoverFormElement>;
            /**
             * A single list item rendered in a searchcraft-popover-list-view.
             */
            "searchcraft-popover-list-item": LocalJSX.SearchcraftPopoverListItem & JSXBase.HTMLAttributes<HTMLSearchcraftPopoverListItemElement>;
            /**
             * This web component is designed to display a list of results within a popover interface.
             * It is consumed within the `searchcraft-popover-form` component.
             * @js-example ```html
             * <searchcraft-popover-list-view />
             * ```
             */
            "searchcraft-popover-list-view": LocalJSX.SearchcraftPopoverListView & JSXBase.HTMLAttributes<HTMLSearchcraftPopoverListViewElement>;
            /**
             * This web component is designed to display the number of results returned from a search query.
             * @react-import ```jsx
             * import { SearchcraftResultsInfo } from "@searchcraft/react-sdk";
             * ```
             * @vue-import ```jsx
             * import { SearchcraftResultsInfo } from "@searchcraft/vue-sdk";
             * ```
             * @js-example ```html
             * <!-- index.html -->
             * <searchcraft-results-info />
             * ```
             * ```js
             * // index.js
             * const resultsInfo = document.querySelector('searchcraft-results-info');
             * resultsInfo.template = (info, { html }) => html`
             *   ${info.range[0]}-${info.range[1]} of ${info.count} results in ${info.responseTime}ms
             * `;
             * ```
             * @react-example ```jsx
             * <SearchcraftResultsInfo
             *   template={(info, { html }) => html`
             *     ${info.range[0]}-${info.range[1]} of ${info.count} results in ${info.responseTime}ms
             *   `}
             * />
             * @vue-example ```jsx
             * <SearchcraftResultsInfo
             *   :template={(info, { html }) => html`
             *     ${info.range[0]}-${info.range[1]} of ${info.count} results in ${info.responseTime}ms
             *   `}
             * />
             * ```
             */
            "searchcraft-results-info": LocalJSX.SearchcraftResultsInfo & JSXBase.HTMLAttributes<HTMLSearchcraftResultsInfoElement>;
            /**
             * This web component is designed to display detailed information for a single search result. Once a query is submitted, the component formats and presents the result.
             */
            "searchcraft-search-result": LocalJSX.SearchcraftSearchResult & JSXBase.HTMLAttributes<HTMLSearchcraftSearchResultElement>;
            /**
             * This web component is responsible for displaying the results of a search query. Once a query is submitted, the component formats and presents an ordered list of the results.
             * @react-import ```jsx
             * import { SearchcraftSearchResults } from "@searchcraft/react-sdk";
             * ```
             * @vue-import ```jsx
             * import { SearchcraftSearchResults } from "@searchcraft/vue-sdk";
             * ```
             * @js-example ```html
             * <!-- index.html -->
             * <searchcraft-search-results
             *   ad-interval="4"
             *   place-ad-at-start="true"
             * />
             * ```
             * ```js
             * // index.js
             * const searchResults = document.querySelector('searchcraft-search-results');
             * searchResults.template = (item, index, { html }) => html`
             *  <h2>${item.title}</h2>
             * `;
             * ```
             * @react-example ```jsx
             * <SearchcraftSearchResults
             *   adInterval={4}
             *   placeAdAtState={true}
             *   template={(item, index, { html }) => html`
             *     <h2>${item.title}</h2>
             *   `}
             * />
             * ```
             * @vue-example ```jsx
             * <SearchcraftSearchResults
             *   adInterval={4}
             *   placeAdAtState={true}
             *   :template={(item, index, { html }) => html`
             *     <h2>${item.title}</h2>
             *   `}
             * />
             * ```
             */
            "searchcraft-search-results": LocalJSX.SearchcraftSearchResults & JSXBase.HTMLAttributes<HTMLSearchcraftSearchResultsElement>;
            /**
             * This web component is designed to choose the number of search results displayed.
             * @react-import ```jsx
             * import { SearchcraftSearchResultsPerPage } from "@searchcraft/react-sdk";
             * ```
             * @vue-import ```jsx
             * import { SearchcraftSearchResultsPerPage } from "@searchcraft/vue-sdk";
             * ```
             * @js-example ```html
             * <!-- index.html -->
             * <searchcraft-search-results-per-page increment="20" />
             * ```
             * @react-example ```jsx
             * <SearchcraftSearchResultsPerPage increment={20} />
             * ```
             * @vue-example ```jsx
             * <SearchcraftSearchResultsPerPage increment="20" />
             * ```
             */
            "searchcraft-search-results-per-page": LocalJSX.SearchcraftSearchResultsPerPage & JSXBase.HTMLAttributes<HTMLSearchcraftSearchResultsPerPageElement>;
            /**
             * This web component is designed to allow users to select between a group of options.
             * @js-example ```html
             * <!-- index.html -->
             * <searchcraft-select
             *  inputId="searchcraft-select"
             *  name="searchcraft-select"
             *  options="[{ label: 'label', value: 'value' }]"
             * />
             * ```
             */
            "searchcraft-select": LocalJSX.SearchcraftSelect & JSXBase.HTMLAttributes<HTMLSearchcraftSelectElement>;
            /**
             * This web component is designed to allow users to select a value from a range defined by a minimum and maximum value. The component renders a slider interface, which can be used to visually choose a value between two boundaries.
             */
            "searchcraft-slider": LocalJSX.SearchcraftSlider & JSXBase.HTMLAttributes<HTMLSearchcraftSliderElement>;
            /**
             * This web component adds Searchcraft's built-in css theme to your page. It does not render anything visible, its only function is to manage the css styles on the page.'
             * @react-import ```jsx
             * import { SearchcraftTheme } from "@searchcraft/react-sdk";
             * ```
             * @vue-import ```jsx
             * import { SearchcraftTheme } from "@searchcraft/vue-sdk";
             * ```
             * @js-example ```html
             * <searchcraft-theme />
             * ```
             * @react-example ```jsx
             * <SearchcraftTheme />
             * ```
             * @vue-example ```jsx
             * <SearchcraftTheme />
             * ```
             */
            "searchcraft-theme": LocalJSX.SearchcraftTheme & JSXBase.HTMLAttributes<HTMLSearchcraftThemeElement>;
            /**
             * This web component simulates a light switch functionality, providing a simple and intuitive toggle between two states—on and off.
             */
            "searchcraft-toggle-button": LocalJSX.SearchcraftToggleButton & JSXBase.HTMLAttributes<HTMLSearchcraftToggleButtonElement>;
        }
    }
}
