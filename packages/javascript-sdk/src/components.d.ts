/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface ScAutoSearchForm {
        "autoSearchFormClass": string;
        "clearInput": () => void;
        "inputCaptionValue": string;
        "labelForInput": string;
        "placeholderValue": string;
        "rightToLeftOrientation": boolean;
        "searchContainerClass": string;
    }
    interface ScBaseSearchForm {
        "errorMessage": string;
        "labelForInput": string;
        "rightToLeftOrientation": boolean;
    }
    interface ScBaseSearchResult {
        "buttonCallbackFn": () => void;
        "buttonLabel": string;
        "callbackFn": () => void;
        "imageAltText": string;
        "imageSrc": string;
        "interactiveResult": boolean;
        "keyDownCallbackFn": () => void;
        "resultBodyContent": string;
        "resultHeading": string;
        "resultSubheading": string;
        "theme": 'light' | 'dark';
    }
    interface ScBaseSearchResults {
    }
    interface ScButton {
        "iconElement"?: Element;
        "iconOnly": boolean;
        "iconPosition": string;
        "label": string;
    }
    interface ScClearInputButton {
        "isRequesting"?: boolean;
        "rightToLeftOrientation": boolean;
    }
    interface ScErrorMessage {
        /**
          * The error message to display. Defaults to a standard message if not provided.
         */
        "errorMessage"?: string;
        /**
          * The theme, which determines the style (light or dark).
         */
        "theme": 'light' | 'dark';
    }
    interface ScInput {
        "error": boolean;
        "formClassName": string;
        "inputCaptionClassName": string;
        "inputCaptionValue": string;
        "inputClassName": string;
        "placeholderValue": string;
        "query": string;
        "rightToLeftOrientation": boolean;
    }
    interface ScInputCaption {
        "error"?: boolean;
        "inputCaptionClassName"?: string;
        "inputCaptionValue": string;
        "rightToLeftOrientation": boolean;
    }
    interface ScInputIcon {
        "error"?: boolean;
        "rightToLeftOrientation": boolean;
    }
    interface ScInputLabel {
        "inputLabelClassName"?: string;
        "label": string;
    }
    interface ScSpinnerDark {
    }
    interface ScSpinnerLight {
    }
}
export interface ScAutoSearchFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScAutoSearchFormElement;
}
export interface ScBaseSearchFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScBaseSearchFormElement;
}
export interface ScButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScButtonElement;
}
export interface ScClearInputButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScClearInputButtonElement;
}
export interface ScInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLScInputElement;
}
declare global {
    interface HTMLScAutoSearchFormElementEventMap {
        "querySubmit": string;
    }
    interface HTMLScAutoSearchFormElement extends Components.ScAutoSearchForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLScAutoSearchFormElementEventMap>(type: K, listener: (this: HTMLScAutoSearchFormElement, ev: ScAutoSearchFormCustomEvent<HTMLScAutoSearchFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLScAutoSearchFormElementEventMap>(type: K, listener: (this: HTMLScAutoSearchFormElement, ev: ScAutoSearchFormCustomEvent<HTMLScAutoSearchFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLScAutoSearchFormElement: {
        prototype: HTMLScAutoSearchFormElement;
        new (): HTMLScAutoSearchFormElement;
    };
    interface HTMLScBaseSearchFormElementEventMap {
        "clearInput": any;
    }
    interface HTMLScBaseSearchFormElement extends Components.ScBaseSearchForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLScBaseSearchFormElementEventMap>(type: K, listener: (this: HTMLScBaseSearchFormElement, ev: ScBaseSearchFormCustomEvent<HTMLScBaseSearchFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLScBaseSearchFormElementEventMap>(type: K, listener: (this: HTMLScBaseSearchFormElement, ev: ScBaseSearchFormCustomEvent<HTMLScBaseSearchFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLScBaseSearchFormElement: {
        prototype: HTMLScBaseSearchFormElement;
        new (): HTMLScBaseSearchFormElement;
    };
    interface HTMLScBaseSearchResultElement extends Components.ScBaseSearchResult, HTMLStencilElement {
    }
    var HTMLScBaseSearchResultElement: {
        prototype: HTMLScBaseSearchResultElement;
        new (): HTMLScBaseSearchResultElement;
    };
    interface HTMLScBaseSearchResultsElement extends Components.ScBaseSearchResults, HTMLStencilElement {
    }
    var HTMLScBaseSearchResultsElement: {
        prototype: HTMLScBaseSearchResultsElement;
        new (): HTMLScBaseSearchResultsElement;
    };
    interface HTMLScButtonElementEventMap {
        "buttonClick": void;
    }
    interface HTMLScButtonElement extends Components.ScButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLScButtonElementEventMap>(type: K, listener: (this: HTMLScButtonElement, ev: ScButtonCustomEvent<HTMLScButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLScButtonElementEventMap>(type: K, listener: (this: HTMLScButtonElement, ev: ScButtonCustomEvent<HTMLScButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLScButtonElement: {
        prototype: HTMLScButtonElement;
        new (): HTMLScButtonElement;
    };
    interface HTMLScClearInputButtonElementEventMap {
        "clearInput": void;
    }
    interface HTMLScClearInputButtonElement extends Components.ScClearInputButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLScClearInputButtonElementEventMap>(type: K, listener: (this: HTMLScClearInputButtonElement, ev: ScClearInputButtonCustomEvent<HTMLScClearInputButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLScClearInputButtonElementEventMap>(type: K, listener: (this: HTMLScClearInputButtonElement, ev: ScClearInputButtonCustomEvent<HTMLScClearInputButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLScClearInputButtonElement: {
        prototype: HTMLScClearInputButtonElement;
        new (): HTMLScClearInputButtonElement;
    };
    interface HTMLScErrorMessageElement extends Components.ScErrorMessage, HTMLStencilElement {
    }
    var HTMLScErrorMessageElement: {
        prototype: HTMLScErrorMessageElement;
        new (): HTMLScErrorMessageElement;
    };
    interface HTMLScInputElementEventMap {
        "searchInputChange": string;
        "clearInput": void;
    }
    interface HTMLScInputElement extends Components.ScInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLScInputElementEventMap>(type: K, listener: (this: HTMLScInputElement, ev: ScInputCustomEvent<HTMLScInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLScInputElementEventMap>(type: K, listener: (this: HTMLScInputElement, ev: ScInputCustomEvent<HTMLScInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLScInputElement: {
        prototype: HTMLScInputElement;
        new (): HTMLScInputElement;
    };
    interface HTMLScInputCaptionElement extends Components.ScInputCaption, HTMLStencilElement {
    }
    var HTMLScInputCaptionElement: {
        prototype: HTMLScInputCaptionElement;
        new (): HTMLScInputCaptionElement;
    };
    interface HTMLScInputIconElement extends Components.ScInputIcon, HTMLStencilElement {
    }
    var HTMLScInputIconElement: {
        prototype: HTMLScInputIconElement;
        new (): HTMLScInputIconElement;
    };
    interface HTMLScInputLabelElement extends Components.ScInputLabel, HTMLStencilElement {
    }
    var HTMLScInputLabelElement: {
        prototype: HTMLScInputLabelElement;
        new (): HTMLScInputLabelElement;
    };
    interface HTMLScSpinnerDarkElement extends Components.ScSpinnerDark, HTMLStencilElement {
    }
    var HTMLScSpinnerDarkElement: {
        prototype: HTMLScSpinnerDarkElement;
        new (): HTMLScSpinnerDarkElement;
    };
    interface HTMLScSpinnerLightElement extends Components.ScSpinnerLight, HTMLStencilElement {
    }
    var HTMLScSpinnerLightElement: {
        prototype: HTMLScSpinnerLightElement;
        new (): HTMLScSpinnerLightElement;
    };
    interface HTMLElementTagNameMap {
        "sc-auto-search-form": HTMLScAutoSearchFormElement;
        "sc-base-search-form": HTMLScBaseSearchFormElement;
        "sc-base-search-result": HTMLScBaseSearchResultElement;
        "sc-base-search-results": HTMLScBaseSearchResultsElement;
        "sc-button": HTMLScButtonElement;
        "sc-clear-input-button": HTMLScClearInputButtonElement;
        "sc-error-message": HTMLScErrorMessageElement;
        "sc-input": HTMLScInputElement;
        "sc-input-caption": HTMLScInputCaptionElement;
        "sc-input-icon": HTMLScInputIconElement;
        "sc-input-label": HTMLScInputLabelElement;
        "sc-spinner-dark": HTMLScSpinnerDarkElement;
        "sc-spinner-light": HTMLScSpinnerLightElement;
    }
}
declare namespace LocalJSX {
    interface ScAutoSearchForm {
        "autoSearchFormClass"?: string;
        "clearInput"?: () => void;
        "inputCaptionValue"?: string;
        "labelForInput"?: string;
        /**
          * Event emitted when the search query is submitted
         */
        "onQuerySubmit"?: (event: ScAutoSearchFormCustomEvent<string>) => void;
        "placeholderValue"?: string;
        "rightToLeftOrientation"?: boolean;
        "searchContainerClass"?: string;
    }
    interface ScBaseSearchForm {
        "errorMessage"?: string;
        "labelForInput"?: string;
        "onClearInput"?: (event: ScBaseSearchFormCustomEvent<any>) => void;
        "rightToLeftOrientation"?: boolean;
    }
    interface ScBaseSearchResult {
        "buttonCallbackFn"?: () => void;
        "buttonLabel"?: string;
        "callbackFn"?: () => void;
        "imageAltText"?: string;
        "imageSrc"?: string;
        "interactiveResult"?: boolean;
        "keyDownCallbackFn"?: () => void;
        "resultBodyContent"?: string;
        "resultHeading"?: string;
        "resultSubheading"?: string;
        "theme"?: 'light' | 'dark';
    }
    interface ScBaseSearchResults {
    }
    interface ScButton {
        "iconElement"?: Element;
        "iconOnly"?: boolean;
        "iconPosition"?: string;
        "label"?: string;
        "onButtonClick"?: (event: ScButtonCustomEvent<void>) => void;
    }
    interface ScClearInputButton {
        "isRequesting"?: boolean;
        "onClearInput"?: (event: ScClearInputButtonCustomEvent<void>) => void;
        "rightToLeftOrientation"?: boolean;
    }
    interface ScErrorMessage {
        /**
          * The error message to display. Defaults to a standard message if not provided.
         */
        "errorMessage"?: string;
        /**
          * The theme, which determines the style (light or dark).
         */
        "theme"?: 'light' | 'dark';
    }
    interface ScInput {
        "error"?: boolean;
        "formClassName"?: string;
        "inputCaptionClassName"?: string;
        "inputCaptionValue"?: string;
        "inputClassName"?: string;
        "onClearInput"?: (event: ScInputCustomEvent<void>) => void;
        "onSearchInputChange"?: (event: ScInputCustomEvent<string>) => void;
        "placeholderValue"?: string;
        "query"?: string;
        "rightToLeftOrientation"?: boolean;
    }
    interface ScInputCaption {
        "error"?: boolean;
        "inputCaptionClassName"?: string;
        "inputCaptionValue"?: string;
        "rightToLeftOrientation"?: boolean;
    }
    interface ScInputIcon {
        "error"?: boolean;
        "rightToLeftOrientation"?: boolean;
    }
    interface ScInputLabel {
        "inputLabelClassName"?: string;
        "label"?: string;
    }
    interface ScSpinnerDark {
    }
    interface ScSpinnerLight {
    }
    interface IntrinsicElements {
        "sc-auto-search-form": ScAutoSearchForm;
        "sc-base-search-form": ScBaseSearchForm;
        "sc-base-search-result": ScBaseSearchResult;
        "sc-base-search-results": ScBaseSearchResults;
        "sc-button": ScButton;
        "sc-clear-input-button": ScClearInputButton;
        "sc-error-message": ScErrorMessage;
        "sc-input": ScInput;
        "sc-input-caption": ScInputCaption;
        "sc-input-icon": ScInputIcon;
        "sc-input-label": ScInputLabel;
        "sc-spinner-dark": ScSpinnerDark;
        "sc-spinner-light": ScSpinnerLight;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "sc-auto-search-form": LocalJSX.ScAutoSearchForm & JSXBase.HTMLAttributes<HTMLScAutoSearchFormElement>;
            "sc-base-search-form": LocalJSX.ScBaseSearchForm & JSXBase.HTMLAttributes<HTMLScBaseSearchFormElement>;
            "sc-base-search-result": LocalJSX.ScBaseSearchResult & JSXBase.HTMLAttributes<HTMLScBaseSearchResultElement>;
            "sc-base-search-results": LocalJSX.ScBaseSearchResults & JSXBase.HTMLAttributes<HTMLScBaseSearchResultsElement>;
            "sc-button": LocalJSX.ScButton & JSXBase.HTMLAttributes<HTMLScButtonElement>;
            "sc-clear-input-button": LocalJSX.ScClearInputButton & JSXBase.HTMLAttributes<HTMLScClearInputButtonElement>;
            "sc-error-message": LocalJSX.ScErrorMessage & JSXBase.HTMLAttributes<HTMLScErrorMessageElement>;
            "sc-input": LocalJSX.ScInput & JSXBase.HTMLAttributes<HTMLScInputElement>;
            "sc-input-caption": LocalJSX.ScInputCaption & JSXBase.HTMLAttributes<HTMLScInputCaptionElement>;
            "sc-input-icon": LocalJSX.ScInputIcon & JSXBase.HTMLAttributes<HTMLScInputIconElement>;
            "sc-input-label": LocalJSX.ScInputLabel & JSXBase.HTMLAttributes<HTMLScInputLabelElement>;
            "sc-spinner-dark": LocalJSX.ScSpinnerDark & JSXBase.HTMLAttributes<HTMLScSpinnerDarkElement>;
            "sc-spinner-light": LocalJSX.ScSpinnerLight & JSXBase.HTMLAttributes<HTMLScSpinnerLightElement>;
        }
    }
}
